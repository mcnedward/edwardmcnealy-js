"use strict";function ColorPicker(){var e=this;e.hours="hours",e.minutes="minutes",e.seconds="seconds",e.red="red",e.green="green",e.blue="blue",e.colors=ko.observable({red:{class:"btn-danger",interval:e.hours},green:{class:"btn-success",interval:e.minutes},blue:{class:"btn-primary",interval:e.seconds}}),e.hoursColor=ko.observable(e.colors().red.class),e.minutesColor=ko.observable(e.colors().green.class),e.secondsColor=ko.observable(e.colors().blue.class),e.update=function(r,t){e[r+"Color"](e.colors()[t].class);var n;for(var o in e.colors())if(e.colors().hasOwnProperty(o)&&e.colors()[o].interval===r){n=o;break}var a=e.colors()[t];e[a.interval+"Color"](e.colors()[n].class);var i=e.colors()[t].interval;e.colors()[t].interval=r,e.colors()[n].interval=i}}function Renderer(){function e(){if(!a.stopRendering())try{requestAnimationFrame(e),t(),r(),a.renderFunction()&&a.renderFunction()()}catch(e){}}function r(){if(o){var e=l.width/2,r=l.height/2;c.beginPath(),c.drawImage(o,e*-1,r*-1,i,s),c.closePath()}}function t(){c.clearRect(0-l.width/2,0-l.height/2,l.width,l.height)}function n(e,r){var t=parseInt(e.slice(1,3),16),n=parseInt(e.slice(3,5),16),o=parseInt(e.slice(5,7),16),a=parseInt(r,16)/255;return"rgba("+t+", "+n+", "+o+", "+a+")"}var o,a=this,i=1200,s=700,l=$("#theCanvas")[0],c=l.getContext("2d"),u=[1,0,0,1,0,0],d=!1;a.renderFunction=ko.observable(),a.stopRendering=ko.observable(!1),e(),a.loadImage=function(e){void 0===o&&(o=new Image),o.onload=function(){var e=l.width/2,r=l.height/2;d||(u[4]+=u[0]*e+u[2]*r,u[5]+=u[1]*e+u[3]*r,c.translate(e,r),d=!0),c.drawImage(o,e*-1,r*-1,i,s)},o.src=e},a.ellipse=function(e,r,t,o,a){a=n(a,100),c.beginPath(),c.ellipse(e,r,t/2,o/2,0,2*Math.PI,!1),c.fillStyle=a,c.fill()},a.polygon=function(e,r,t){var o=e.slice(0);c.beginPath(),r=n(r,t),c.fillStyle=r;for(var i=o[0],s=[],l=0;l<o.length;l++){var u=o[l];0===l?c.moveTo(u.x,u.y):(u.x===i.x&&u.y===i.y&&l<o.length-1&&(s=o.splice(l+1,o.length-l)),c.lineTo(u.x,u.y))}c.fill(),c.closePath(),s.length>0&&a.polygon(s,r)},a.text=function(e,r,t,n,o){if(c.font="bold 16px Segoe UI",c.fillStyle=n,o){var a=c.measureText(t);e-=a.width/2}c.fillText(t,e,r)},a.width=function(){return i},a.height=function(){return s};var f,p,g;a.addMouseOverEvent=function(e,r,t){f=e,p=r,g=t,l.addEventListener("mousemove",function(e){var r=l.getBoundingClientRect(),t=l.width/2,n=l.height/2,o=e.clientX-r.left-t,a=e.clientY-r.top-n;f(o,a)},!1)};var h;a.addMouseScrollEvent=function(e){h=e,l.addEventListener("mousewheel",function(){var e=event.wheelDelta/120;h(1+e/2)},!1)}}function TimeZoneService(e){function r(e,r){var o=t(l()),a=n(s()),i=t(r)-o,c=n(e)-a;return{x:i,y:c}}function t(e){e=o(e);var r=f/Math.PI*Math.pow(2,c()),t=e+Math.PI;return r*t}function n(e){e=o(e);var r=f/Math.PI*Math.pow(2,c()),t=Math.tan(Math.PI/4+e/2),n=Math.PI-Math.log(t);return r*n}function o(e){return e*(Math.PI/180)}var a,i,s,l,c,u,d=this,f=e/4;d.setup=function(e,r,t){s=e,l=r,c=t},d.loadTimeZones=function(e,t,n){function o(){fetch("/api/color-zones/map-bounds").then(function(e){e.ok&&e.json().then(function(e){for(var t=JSON.parse(e),n=0;n<t.length;n++)for(var o=t[n],i=0;i<a().length;i++)if(a()[i].matchesId(o.name)){var s=r(o.boundingBox.ymin,o.boundingBox.xmin),l=r(o.boundingBox.ymax,o.boundingBox.xmax);a()[i].boundingBox={xyMin:s,xyMax:l};break}})})}function f(e){var t=e.name.replace(/\/|_/g,"-");fetch("/api/color-zones/polygons/"+t).then(function(n){return n.ok?void n.json().then(function(t){for(var n=JSON.parse(t),o={},a=0;a<n.polygons.length;a++){for(var s=n.polygons[a],l=[],c=0;c<s.points.length;c+=2){var u=s.points.slice(c,c+2),d=r(u[0],u[1]);l.push(d)}var f=o[s.name];f?f.coords=f.coords.concat(l):(f=new Polygon(s.name,l,r(s.centroid[1],s.centroid[0])),o[s.name]=f)}var p,g=0;$.each(o,function(e,r){r.coords.length>g&&(g=r.coords.length,p=r.name)}),i()[e.name]||(i()[e.name]=[]),i()[e.name]=o,e.centroidPolygon=o[p]}):void u("Something went wrong trying to load the time zone polygons for "+t+"...")})}return u=e,void 0===s||void 0===l||void 0===c?void u("You need to call TimeZoneService.setCenterCoordinates(centerLat, centerLng, zoom) first!"):(a=t,i=n,fetch("/api/color-zones/hover-regions").then(function(e){return e.ok?void e.json().then(function(e){function t(e){for(var t=[],n=0;n<e.hoverRegion.length;n++)for(var o=e.hoverRegion[n],a=0;a<o.points.length;a+=2){var i=o.points.slice(a,a+2),s=r(i[0],i[1]);t.push(s)}return new TimeZone(e.name,t)}for(var n=JSON.parse(e),i=0;i<n.length;i++){var s=t(n[i]);f(s),a().push(s)}o()}):void u("Something went wrong trying to load the time zone regions...")}),void(d.reloadCoordinates=function(){for(var e=0;e<a().length;e++)for(var t=a()[e].coords,n=0;n<t.length;n++)t[n]=r(t[n].x,t[n].y)}))}}function TooltipService(e){function r(t){if(t!==e.length){try{e[t].id.tooltip("show")}catch(e){}setTimeout(function(){try{e[t].id.tooltip("dispose")}catch(e){}t++,e[t]||localStorage.setItem(n,!0),r(t)},1e3*e[t].timeout)}}var t=this,n="tooltipsShown";t.loadToolips=function(){var t=localStorage.getItem(n);0===e.length||t||r(0)}}function ParserDirectory(e,r,t){var n=this;n.name=e?e:null,n.directories=r?r:[],n.files=t?t:[]}function ParserFile(e,r){var t=this;t.id=e?e:0,t.name=r?r:null}function LatLng(e,r){var t=this;t.lat=e,t.lng=r}function Polygon(e,r,t){var n=this;n.name=e,n.coords=r,n.centroid=t,n.id=ko.pureComputed(function(){return n.name.replace(/\/|_/g,"-")})}function TimeZone(e,r){var t=this;t.name=e,t.coords=r,t.polygons=void 0,t.centroidPolygon=void 0,t.boundingBox=void 0,t.matchesId=function(e){return t.id()===e.replace(/\/|_/g,"-")},t.id=ko.pureComputed(function(){return t.name.replace(/\/|_/g,"-")})}var app=angular.module("mcnedward",["ui.router","ui.bootstrap","ngAnimate","vcRecaptcha"]).config(["$stateProvider","$urlRouterProvider","$httpProvider","$locationProvider",function(e,r,t,n){e.state("app",{url:"/",templateUrl:"core/home.html",controller:"ContactCtrl",title:"Edward McNealy"}).state("ii",{url:"/inheritance-inquiry/",templateUrl:"ii/ii.html",controller:"IICtrl",title:"Inheritance Inquiry"}).state("parser",{url:"/parser/",templateUrl:"parser/parser.html",controller:"ParserCtrl",title:"Parser"}).state("colorZones",{url:"/color-zones/",templateUrl:"colorZones/colorZones.html",controller:"ColorZonesCtrl",title:"Color Zones"}).state("bramble",{url:"/bramble/",templateUrl:"bramble/bramble.html",title:"Bramble"}).state("keepfit",{url:"/keepfit/",templateUrl:"keepfit/keepfit.html",title:"KeepFit"}).state("blackjack",{url:"/blackjack/",templateUrl:"blackjack/blackjack.html",controller:"BlackjackCtrl",title:"Blackjack"}).state("numberPrinter",{url:"/numberprinter/",templateUrl:"numberPrinter/numberPrinter.html",controller:"NumberPrinterCtrl",title:"Number Printer"}),r.otherwise("/"),r.when(/ii/,["$state","$match",function(e,r){e.go("ii")}]),n.html5Mode(!0)}]);angular.module("mcnedward").controller("AppCtrl",["$rootScope","$state","$timeout","$location","$anchorScroll",function(e,r,t,n,o){function a(e){e&&""!==e&&t(function(){$("html, body").animate({scrollTop:$("#"+e).offset().top+2},1)})}e.inRoot=!0,e.appTitle="Edward McNealy",e.$on("$stateChangeSuccess",function(r,t,n,o,i){e.appTitle=t.title&&""!==t.title?t.title:"Edward McNealy",a("app"===o.name?"scrollhere":o.name),"colorZones"===o.name&&e.$broadcast("stopRendering"),e.inRoot="app"===t.name||""===t.name,e.useContainerFluid="colorZones"==t.name||"parser"==t.name,e.useContainer=!e.inRoot&&!e.useContainerFluid,ga("set","page","app"===t.name?"/index.html":t.url+".html"),ga("send","pageview")}),$("#loader").fadeOut(200)}]),angular.module("mcnedward").controller("BlackjackCtrl",["$rootScope","$scope","$window","blackjackService","playerService",function(e,r,t,n,o){function a(e){r.player=o.getPlayer(),r.dealer=o.getDealer(),e&&i()}function i(){o.updateUsers([r.player,r.dealer])}function s(e){e?($("#options").show(),$("#startCards").hide(),r.stopBets=!0):($("#options").hide(),$("#startCards").show(),r.stopBets=!1)}r.player=o.getPlayer(),r.dealer=o.getDealer(),e.$on("busted",function(e,t){var i=t;"player"==i.type&&(r.message="You busted...",o.userWon("dealer")),"dealer"==i.type&&(r.message="Dealer busted! You win!",o.userWon("player")),n.flipCards(),a(!0),s(!1)}),e.$on("dealerWon",function(){r.message="Dealer wins...",o.userWon("dealer"),a(!0),s(!1)}),e.$on("playerWon",function(){r.message="You win!",o.userWon("player"),a(!0),s(!1)}),e.$on("push",function(){r.message="Push.",a(!0),s(!1)}),e.$on("21",function(e,t){var i=t;"player"==i.type&&(r.message="You got 21! You win!",o.userWon("player")),"dealer"==i.type&&(r.message="Dealer got 21...",o.userWon("dealer")),n.flipCards(),a(!0),s(!1)});for(var l=0;l<3;l++){var c=$("<img>");2==l?(c.attr("src","img/blackjack/card/b2fv.png"),c.attr("id","startCard"),c.addClass("card-img")):(c.attr("src","img/blackjack/card/b2pl.png"),c.addClass("card-img")),$("#startCards").append(c)}r.dealCards=function(){r.message="",$(".empty-card").css("display","none"),o.resetUsers(),e.hit21=!1,n.dealCards(),e.hit21||(a(),s(!0))},r.hitMe=function(){n.hitMe(r.player),a()},r.stay=function(){n.stay(),a()},r.addChip=function(e){return r.message="",r.stopBets?void(r.message='You can"t place any more bets now!'):r.player.money<r.player.bet+e?void(r.message='You don"t have the money to place that bet!'):(o.addChip(e),void a())},r.clearBet=function(){return r.message="",r.stopBets?void(r.player.bet>0&&(r.message='You can"t back out now!')):void o.clearBet()}}]),angular.module("mcnedward").service("blackjackService",["$rootScope","playerService",function(e,r){function t(e,r){var t,n;if(1==r||r>10){switch(r){case 1:t="Ace",r=11;break;case 11:t="Jack",r=10;break;case 12:t="Queen",r=10;break;case 13:t="King",r=10}n=e.substring(0,1).toLowerCase()+t.substring(0,1).toLowerCase()}else t=r,n=e.substring(0,1).toLowerCase()+r;var o=e+t;return{suit:e,name:t,value:r,id:o,isFaceDown:!1,src:"img/blackjack/card/"+n+".png"}}function n(){l=[];for(var e=0;e<s.length;e++)for(var r=1;r<14;r++){var n=t(s[e],r);l.push(n)}}function o(e,t){var n=l[0];t&&(n.isFaceDown=t),r.addCard(e,n),l.splice(l.indexOf(n),1)}function a(){n();for(var e,r=[],t=l.length;t;){e=Math.floor(Math.random()*l.length);var o=l[e];e in l&&(r.push(o),delete l[e],t--)}return l=r}var i={},s=["clubs","spades","diamonds","hearts"],l=[];return i.dealCards=function(){a();for(var e=0;e<4;e++)e%2===0?o(r.getPlayer()):3==e?o(r.getDealer(),!0):o(r.getDealer())},i.hitMe=function(e){o(e)},i.stay=function(){for(var t=r.getDealer(),n=0;n<t.cards;n++)t.cards[n].isFaceDown&&(t.cards[n].faceDown=!1);for(;t.handValue<17;)o(t);t.handValue>21?e.$broadcast("dealerBusted"):t.handValue>r.getPlayer().handValue?e.$broadcast("dealerWon"):t.handValue==r.getPlayer().handValue?e.$broadcast("push"):e.$broadcast("playerWon"),e.$broadcast("showCards")},i.flipCards=function(){for(var e=0;e<r.getDealer().cards.length;e++){var t=r.getDealer().cards[e];t.isFaceDown&&(t.isFaceDown=!1,r.getDealer().table.find($("#"+t.id)).attr("src",t.src))}},i}]),angular.module("mcnedward").service("playerService",["$rootScope",function(e){function r(e){l[e.type]=e,localStorage.users=JSON.stringify(l)}function t(e){for(var t=0;t<e.length;t++){var n=e[t];r(n)}}function n(){function e(e){e.cards=[],e.handValue=0}function r(){var e=JSON.parse(localStorage.users);return e.player.table=$(e.player.table.selector),e.dealer.table=$(e.dealer.table.selector),e}if(localStorage.users&&localStorage.users.length>2){var n=r(),a=n.player,i=n.dealer;e(a),e(i),t([a,i])}else l.player={table:$("#pTable"),cards:[],handValue:0,type:"player",money:1e3,bet:0,chips:o(),wins:0,loses:0},l.dealer={table:$("#dTable"),cards:[],handValue:0,type:"dealer",wins:0,loses:0},localStorage.users=JSON.stringify(l)}function o(){return{chip5s:0,chip10s:0,chip25s:0,chip100s:0,chip500s:0}}function a(r){for(var t=0;t<r.cards.length&&!("Ace"==r.cards[t].name&&(11==r.cards[t].value&&(r.cards[t].value=1,i(r)),r.handValue<21));t++);r.handValue>21&&e.$broadcast("busted",r)}function i(e){for(var t=0,n=0;n<e.cards.length;n++)t+=e.cards[n].value;e.handValue=t,r(e)}var s={},l={};return s.getPlayer=function(){return l.player},s.getDealer=function(){return l.dealer},s.resetUsers=function(){n()},s.updateUser=function(e){r(e)},s.updateUsers=function(e){t(e)},s.addCard=function(r,t){r.cards.push(t),r.handValue=r.handValue+t.value,r.handValue>21&&a(r),21==r.handValue&&(e.$broadcast("21",r),e.hit21=!0)},s.addChip=function(e){l.player.chips["chip"+e+"s"]++,l.player.bet=l.player.bet+e,r(l.player)},s.clearBet=function(){l.player.bet=0,l.player.chips=o()},s.userWon=function(e){var r=l.player,n=l.dealer;"player"==e?(r.wins=r.wins+1,n.loses=n.loses+1,r.money+=r.bet):(n.wins=n.wins+1,r.loses=r.loses+1,r.money-=r.bet),r.bet=0,r.chips=o(),t([r,n])},n(),s}]),angular.module("mcnedward").directive("playingCard",function(){return{scope:{card:"="},restrict:"AE",replace:"true",controller:function(e){e.$on("playerBusted",function(){e.card.isFaceDown&&$("#"+e.card.id).attr("src",e.card.src)}),e.$on("showCards",function(){$("#"+e.card.id).attr("src",e.card.src)})},link:function(e,r,t){e.card.isFaceDown?r.attr("src","img/blackjack/card/b2fv.png"):r.attr("src",e.card.src)},template:'<img id="{{card.id}}" class="card-img"/>'}}),angular.module("mcnedward").controller("ColorZonesCtrl",["$rootScope","$scope",function(e,r){$(document).ready(function(){r.renderer=new Renderer;var e=new TimeZoneService(r.renderer.width()),t=new ColorPicker,n=new ColorZonesViewModel(r.renderer,e,t);ko.options.useOnlyNativeEvents=!0,ko.applyBindings(n,$("#main")[0]);var o=new TooltipService([{id:$("#canvasContainer"),timeout:8},{id:$("#hoursControl"),timeout:3},{id:$("#minutesControl"),timeout:3},{id:$("#secondsControl"),timeout:3},{id:$("#opacityControl"),timeout:4},{id:$("#showTimesControl"),timeout:6},{id:$("#showColorsControl"),timeout:6}]);o.loadToolips()}),e.$on("stopRendering",function(){r.renderer.stopRendering(!0)})}]);var ColorZonesViewModel=function(e,r,t){function n(r){y=r,fetch("/api/color-zones/map?centerLat="+f.centerLat()+"&centerLng="+f.centerLng()+"&zoom="+f.zoom()+"&width="+p+"&height="+g).then(function(r){return r.ok?void r.text().then(function(r){e.loadImage(r),void 0!==y&&y()}):void console.error("Something went wrong trying to load the map image...")})}function o(e){return e<10&&(e="0"+e),e.toString()}function a(e,r,n,o){var a=t.colors()[e].interval;switch(a){case t.hours:return r;case t.minutes:return n;case t.seconds:return o;default:console.warn("Could not find an interval for: "+a+"...")}}function i(e,r,t,n){for(var o=0,a=e[e.length-1],i=0;i<e.length;i++){var s=e[i];if(a.y<=t&&s.y>=t||a.y>t&&s.y<t){var l=(s.x-a.x)/(s.y-a.y),c=l*(t-a.y)+a.x;c<r&&o++}a=s}return o%2===1}var s,l,c,u,d,f=this,p=e.width(),g=e.height(),h="#660d60",m="HH:mm:ss";f.colorPicker=ko.observable(t),f.opacity=ko.observable(80),f.showTimes=ko.observable(!1),f.colorAllZones=ko.observable(!0),f.width=ko.observable(p+"px"),f.height=ko.observable(g+"px"),f.zoom=ko.observable(1),f.centerLat=ko.observable(20),f.centerLng=ko.observable(0),f.timeZones=ko.observableArray(),f.timeZoneRegions=ko.observable({});var v=ko.pureComputed(function(){return f.colorAllZones()?"white":"black"});e.renderFunction(function(){if(0!==f.timeZones().length){for(var r=[],n=0;n<f.timeZones().length;n++){var i=f.timeZones()[n],p=moment().tz(i.name),g=o(p.hours()),y=o(p.minutes()),b=o(p.seconds()),w=a(t.red,g,y,b),C=a(t.green,g,y,b),S=a(t.blue,g,y,b),k="#"+w+C+S;if(f.colorAllZones()&&e.polygon(i.coords,k,f.opacity()),void 0!==i.centroidPolygon){var P={textX:i.centroidPolygon.centroid.x,textY:i.centroidPolygon.centroid.y,time:p.format(m),colorHex:k};r.push(P),s&&""!==s&&s===i.name&&(c=P)}}var M=f.timeZoneRegions()[s];if(M&&($.each(M,function(r,t){if(t&&t.coords&&0!==t.coords.length){var n=f.colorAllZones()?h:c.colorHex;e.polygon(t.coords,n,80)}}),f.showTimes()||e.text(u,d-5,c.time,v(),!0),e.text(u,d-25,l,v(),!0),e.text(u,d-45,c.colorHex,v(),!0)),f.showTimes())for(var x=0;x<r.length;x++)e.text(r[x].textX,r[x].textY,r[x].time,v())}});var y;n(),r.setup(f.centerLat,f.centerLng,f.zoom),r.loadTimeZones(function(e){console.error(e)},f.timeZones,f.timeZoneRegions),e.addMouseOverEvent(function(e,r){if(0!==f.timeZones().length)for(var t=0;t<f.timeZones().length;t++){var n=f.timeZones()[t],o=n.boundingBox;if(void 0===o)return;if(r>o.xyMax.y&&r<o.xyMin.y&&e>o.xyMin.x&&e<o.xyMax.x){var a=f.timeZoneRegions()[n.name];for(var c in a)if(a.hasOwnProperty(c)&&i(a[c].coords,e,r))return s=n.name,l=c,u=e,void(d=r)}}},f.centerLat(),f.centerLng()),e.addMouseScrollEvent(function(e){if(e>1?f.zoom(f.zoom()+1):f.zoom(f.zoom()-1),f.zoom()<1)return void f.zoom(1)})};angular.module("mcnedward").controller("ContactCtrl",["$scope",function(e){function r(){e.contactSuccessMessage="",e.contactErrorMessage=""}function t(t){r(),e.contactErrorMessage=t}e.contactInfo={},e.isFormSubmitted=!1,e.contactSuccessMessage="",e.contactErrorMessage="",e.submitContact=function(n,o){if(!e.isFormSubmitted&&(n.$setSubmitted(),!n.$invalid)){e.isFormSubmitted=!0,n.$setPristine(),n.$setUntouched(),r();var a="Sorry, but something went wrong with the reCaptcha. Please refresh the page and try again.";if(null===grecaptcha)return void t(a);var i=o.recaptchaResponse;if(null===i)return void t(a);e.contactSuccessMessage="Sending...";var s="/api/contact?secretResponse="+i;fetch(s,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(o)}).then(function(r){r.ok?r.text().then(function(r){e.contactSuccessMessage=r,e.$apply(),ga("send","event","Contact","Email","From: "+o.email+" - Subject: "+o.subject)}):r.text().then(function(r){t(r),e.isFormSubmitted=!1,e.$apply()})})}},e.checkLength=function(e){var r=e?e.length:0;return r||(r=0),r},e.emailMaxLength=100,e.subjectMaxLength=100,e.messageMaxLength=1e3,e.subjectLength=function(){return e.checkLength(e.contactInfo.subject)},e.messageLength=function(){return e.checkLength(e.contactInfo.message)}}]),angular.module("mcnedward").controller("IICtrl",["$scope","modalService",function(e,r){function t(r){e.showAppError=!1,e.appError=""}function n(r){e.showLibError=!1,e.libError=""}e.iiInfo={},e.isFormSubmitted=!1,e.openDownloadForApp=function(){t(),r.showModal("downloadAppModal")},e.openDownloadForLib=function(){n(),r.showModal("downloadLibModal")},e.downloadIIApp=function(r,n){if(!e.isAppFormSubmitted&&(r.$setSubmitted(),!r.$invalid)){e.isAppFormSubmitted=!0,r.$setPristine(),r.$setUntouched(),t();var o="/api/ii/app?secretResponse="+n.recaptchaResponse;window.location.href=o}},e.downloadIILib=function(r,t){if(!e.isLibFormSubmitted&&(r.$setSubmitted(),!r.$invalid)){e.isLibFormSubmitted=!0,r.$setPristine(),r.$setUntouched(),n();var o="/api/ii/lib?secretResponse="+t.recaptchaResponse;window.location.href=o}}}]),angular.module("mcnedward").controller("NumberPrinterCtrl",["$scope",function(e){function r(r){t();var n=e.number;return""===n?void(e.errorMessage="You need to enter something!"):fetch("/api/number-printer?number="+n).then(function(t){return t.ok?void t.json().then(r):void t.text().then(function(r){e.errorMessage=r,e.$apply()})}).catch(function(r){e.errorMessage=r,e.$apply()})}function t(){e.result="",e.errorMessage=""}e.result="",e.convertToEnglish=function(){r(function(r){e.result=r.englishWord,e.$apply()})},e.convertToRomanNumeral=function(){r(function(r){e.result=r.romanNumeral,e.$apply()})}}]),angular.module("mcnedward").factory("modalService",["$timeout",function(e){function r(e){classie.remove(o,"md-show")}function t(){r()}var n,o,a,i={};return i.showModal=function(e){o=document.querySelector("#"+e),classie.add(o,"md-show"),n=document.querySelector("#overlay-"+e),n.removeEventListener("click",t),n.addEventListener("click",t),a=o.querySelector(".cancel-btn"),a.addEventListener("click",function(e){e.stopPropagation(),t()})},i.closeModal=function(){t()},i.isOpen=function(){return void 0!==o},i}]),angular.module("mcnedward").factory("recaptchaService",function(){var e={};return e.verify=function(e,r,t){return null===e?void t("Sorry, but something went wrong with the reCaptcha. Please refresh the page and try again."):void fetch("/api/recaptcha/verify?secretResponse="+e,{method:"POST"}).then(function(n){var o=n.ok;n.text().then(function(n){o?r(e,n):t(n)})})},e}),angular.module("mcnedward").factory("userService",[function(){var e={};return e.clearCache=function(){localStorage.removeItem("user"),this.savedUser=null},e.isLoggedIn=function(){return null!==this.getAuthToken()},e.isAdmin=function(){return this.savedUser||this.getUser(),!(!this.savedUser.userRoles||this.savedUser.userRoles.indexOf("ADMIN")==-1)},e.save=function(e){e&&""!==e.authToken?(localStorage.user=JSON.stringify(e),this.savedUser=e):console.log("No user to save.")},e.update=function(){this.save(this.getUser())},e.getUser=function(){return this.savedUser||(this.savedUser=localStorage.user?JSON.parse(localStorage.user):[]),this.savedUser},e.getAuthToken=function(){return this.savedUser||this.getUser(),this.savedUser.authToken&&""!==this.savedUser.authToken?this.savedUser.authToken:null},e}]),angular.module("mcnedward").directive("directory",["$rootScope",function(e){return{restrict:"AE",transclude:!0,scope:{name:"=",id:"=",directories:"=",classes:"="},link:function(r,t,n){r.selectClass=function(r,t){e.$broadcast("selectClass",{directoryId:r,classId:t})},r.isRealDirectory=null!==r.name&&""!==r.name,r.showContents=!1},templateUrl:"parser/directory.html"}}]),angular.module("mcnedward").directive("dragAndDrop",["$rootScope","$timeout",function(e,r){return{restrict:"E",link:function(e,t,n){function o(){}var a="Drag files here!";e.dragAreaMessage=a,e.dragoverClass="",e.uploadProgress=0,e.handleError=function(r,t){e.fileSelected=!1,e.hasError=!0,e.load(!1),e.dragoverClass="dragover-error",e.dragAreaMessage="",e.dragAreaError=r,console.log(t,r)};var i=!1;e.load=function(t){if(e.dragAreaError="",t)i=!0,e.uploadProgress=0,o();else{if(i=!1,e.hasError)return;e.dragAreaMessage="Finished!",e.dragoverClass="",e.uploadProgress=100,r(function(){e.dragAreaMessage=a,e.uploadProgress=0},3e3)}},t.bind("dragenter",function(r){r.stopPropagation(),r.preventDefault(),r.originalEvent.dataTransfer.dropEffect="copy",e.dragoverClass="dragover",e.dragAreaMessage="Drop files!",e.dragAreaError="",e.$apply()}),t.bind("dragleave",function(r){r.stopPropagation(),r.preventDefault(),e.dragoverClass="",e.dragAreaMessage="Drag files here!",e.dragAreaError="",e.$apply()}),t.bind("dragover",function(r){r.stopPropagation(),r.preventDefault(),r.originalEvent.dataTransfer.dropEffect="copy",e.dragoverClass="dragover",e.dragAreaMessage="Drop files!",e.dragAreaError="",e.$apply()}),t.bind("dragevent",function(e){e.stopPropagation(),e.preventDefault()}),t.bind("drop",function(r){function t(e,r,n){var o=e.createReader();return new Promise(function(e){var s=[];!function r(n,l){o.readEntries(function(o){o.length?(s.push(Promise.all(o.map(function(e){if(!e.isFile){var r=new ParserDirectory(e.name,[],[]);return n?n.directories.push(r):n=r,t(e,r,l)}e.file(function(e){u.uploadFiles.push(e);var r=new ParserFile(a++,e.name);return n.files.push(r),r},function(e){console.log(e)})}))),r(n,l)):Promise.all(s).then(function(r){e(l)},i)})}(r,n)})}function n(e){for(var r=[],n=0;n<e.length;n++)r.push(e[n].webkitGetAsEntry());return new Promise(function(e){var n=[];n.push(Promise.all(r.map(function(e){if(e.isFile)return new Promise(function(r){e.file(function(e){u.uploadFiles.push(e);var t=new ParserFile(a++,e.name);return u.files.push(t),r(u),t},i)});var r=new ParserDirectory(e.name,[],[]);return u?u.directories.push(r):u=r,t(e,r,u)}))),Promise.all(n).then(function(r){e(u)},i)}).then(function(e){o(e)},i)}function o(r){e.dragoverClass="dropped",e.dragAreaMessage="Ready for Upload!",e.$apply(),e.filesDropped(r)}r.stopPropagation(),r.preventDefault();var a=1,i=function(e){console.log(e)},s=r.originalEvent;if(s){var l=s.dataTransfer,c=l.items,u=new ParserDirectory;if(u.uploadFiles=[],1==c.length){var d=c[0].webkitGetAsEntry();d.isFile?n(c):(u.name=d.name,t(d,u,u).then(function(e){o(e)},i))}else n(c)}})},templateUrl:"parser/fileUpload.html"}}]),angular.module("mcnedward").controller("ParserCtrl",["$rootScope","$scope","$window","parserService","recaptchaService","modalService",function(e,r,t,n,o,a){function i(e,t){var n="",o=t&&t.data?t.data:null,a=o&&o.errors?o.errors:[];if(a.length>0)for(var i=0;i<a.length;i++)n+=a[i];else n=e;r.handleError(n,t),r.parsingComplete=!1}function s(e,t){r.secretResponse=e,r.token=t,n.uploadFiles(r.files,e,t).then(function(o){return o.ok?void o.json().then(function(o){r.uploadDirectory.token=o.token,r.uploadDirectory.fileIds=o.fileIds;try{n.parseFiles(r.uploadDirectory,e,t).then(function(e){e.ok?(r.dragAreaMessage="Analyzing your files...",r.$apply(),e.json().then(function(e){n.saveDirectory(e),r.load(!1),r.fileSelected=!1,r.isParsingComplete=!0,r.uploadDirectory={},r.directory=e;var t=u(e);r.classObject=t,d(t)})):e.text().then(function(e){i(e)})},function(e){i(f,e)})}catch(e){i(f,e)}}):void o.text().then(function(e){i(e)})})}function l(e,r,t){var n;if(r===e.id&&e.classes&&(n=c(e.classes,t)))return n;for(var o=0;o<e.directories.length;o++){var a=e.directories[o];if(n=l(a,r,t))return n}}function c(e,r){for(var t=0;t<e.length;t++){var n=e[t];if(n.id==r)return n}}function u(e){if(e.classes&&e.classes.length>0)return e.classes[0];if(e.directories)for(var r=0;r<e.directories.length;r++)if(p=u(e.directories[r]))return p;return null}function d(e){var r;if($("#classContent").empty(),e.codeTag)r=e.codeTag;else{r=$("<code/>",{id:"code",text:e.classContent});for(var t=r.length,n=0;n<t;n++){r[n].innerHTML='<span class="line-number"></span>'+r[n].innerHTML+'<span class="cl"></span>';for(var o=r[n].innerHTML.split(/\n/).length,a=0;a<o;a++){var i=r[n].getElementsByTagName("span")[0],s=a+1;i.innerHTML+='<span id="'+s+'">'+s+"</span>"}}e.codeTag=r}r.appendTo("#classContent")}/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)&&a.showModal("deviceModal"),r.uploadInfo={},r.isFormSubmitted=!1,r.isParsingComplete=!1,r.fileUploadMessage="Click to choose a Java file or project to parse!",r.errorMessage="",r.fileSelected=!1;var f="Something went wrong parsing files...Please try again.";if($("#file-upload").change(function(){var e=this.files;if(!e||0===e.length)return void console.log("No files selected...");var t=e[0].name;r.files=e,r.fileName=t,r.fileSelected=!0,r.$apply()}),r.uploadFile=function(e,t){r.isFormSubmitted||(e.$setSubmitted(),e.$invalid||(r.isFormSubmitted=!0,e.$setPristine(),e.$setUntouched(),r.load(!0),r.dragAreaMessage="Uploading your files...",o.verify(t.recaptchaResponse,s,i)))},r.selectClassObject=function(e){for(var t=0;t<r.classObjects.length;t++){var n=r.classObjects[t];n.fileName===e.fileName&&(r.classObject=n),r.fileNames[t].isSelected=!1}e.isSelected=!0,d(r.classObject)},r.filesDropped=function(e){r.fileName=e.name?e.name:e.uploadFiles.length+" Files",r.files=e.uploadFiles,r.fileSelected=!0,r.uploadDirectory=e,r.$apply()},r.moveToLine=function(e){var r=e.lineNumber,t=$("#"+r);t.addClass("line-animation-in"),setTimeout(function(){t.addClass("line-animation-out"),setTimeout(function(){t.removeClass("line-animation-in"),t.removeClass("line-animation-out")},1500)},3e3),$("#classContent").animate({scrollTop:t.offset().top-200},500)},e.$on("selectClass",function(e,t){var n=l(r.directory,t.directoryId,t.classId);n?(r.classObject=n,d(n)):r.errorMessage="Could not find class."}),r.directory=n.getDirectory(),r.directory){r.isParsingComplete=!0;var p=u(r.directory);p?(r.classObject=p,d(p)):r.errorMessage="Could not find any files in directory "+r.directory.name+"."}}]),angular.module("mcnedward").service("parserService",["$http",function(e){var r={};return r.uploadFiles=function(e,r,t){var n=new FormData;angular.forEach(e,function(e,r){n.append("files",e)});var o="/api/parser/files?secretResponse="+r+"&requestToken="+t;return fetch(o,{method:"POST",body:n})},r.parseFiles=function(e,r,t){e.uploadFiles=null;var n="/api/parser/parse?secretResponse="+r+"&requestToken="+t;return fetch(n,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(e)})},r.getUploadProgress=function(e,r,t){return fetch("/api/parser/progress?secretResponse="+e+"&requestToken="+r)},r.saveClasses=function(e){e?(localStorage.classObjects=JSON.stringify(e),r.classObjects=e):console.log("No classObjects to save...")},r.getClasses=function(){var e=localStorage.classObjects?JSON.parse(localStorage.classObjects):null;return e},r.saveDirectory=function(e){e?(localStorage.directory=JSON.stringify(e),r.directory=e):console.log("No directory to save...")},r.getDirectory=function(){var e=localStorage.directory?JSON.parse(localStorage.directory):null;return e},r}]),angular.module("mcnedward").directive("structure",["$rootScope",function(e){return{restrict:"E",transclude:!0,scope:{title:"@",contents:"="},controller:function(e,r,t){},link:function(e,r,t){},templateUrl:"parser/structure.html"}}]),angular.module("mcnedward").directive("buttonoptions",[function(){return{scope:{confirmAction:"&",cancelAction:"&"},restrict:"AE",replace:"true",controller:function(e){e.confirm=function(){e.confirmAction()},e.cancel=function(){e.cancelAction()}},link:function(e,r,t){e.title=t.confirmTitle,e.cancelTitle=t.cancelTitle?t.cancelTitle:"X",t.confirmClass&&(e.confirmClass=t.confirmClass)},template:'<div class="btn-group"><button data-ng-click="confirm()" class="btn ebtn-green">{{title}}</button><button data-ng-click="cancel()" class="btn ebtn-red cancelBtn">{{cancelTitle}}</button></div>'}}]),app.directive("ngEnter",function(){return function(e,r,t){r.bind("keydown keypress",function(r){13===r.which&&(e.$apply(function(){e.$eval(t.ngEnter,{event:r})}),r.preventDefault())})}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
