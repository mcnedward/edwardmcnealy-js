'use strict';

var app = angular.module('mcnedward', ['ui.router', 'ui.bootstrap', 'ngAnimate', 'vcRecaptcha']).config(['$stateProvider', '$urlRouterProvider', '$httpProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $httpProvider, $locationProvider) {
	'use strict';

	$stateProvider.state('app', {
		url: '/',
		templateUrl: 'core/home.html',
		controller: 'ContactCtrl',
		title: 'Edward McNealy'
	}).state('ii', {
		url: '/inheritance-inquiry/',
		templateUrl: 'ii/ii.html',
		controller: 'IICtrl',
		title: 'Inheritance Inquiry'
	}).state('parser', {
		url: '/parser/',
		templateUrl: 'parser/parser.html',
		controller: 'ParserCtrl',
		title: 'Parser'
	}).state('colorZones', {
		url: '/color-zones/',
		templateUrl: 'colorZones/colorZones.html',
		controller: 'ColorZonesCtrl',
		title: 'Color Zones'
	}).state('bramble', {
		url: '/bramble/',
		templateUrl: 'bramble/bramble.html',
		title: 'Bramble'
	}).state('keepfit', {
		url: '/keepfit/',
		templateUrl: 'keepfit/keepfit.html',
		title: 'KeepFit'
	}).state('blackjack', {
		url: '/blackjack/',
		templateUrl: 'blackjack/blackjack.html',
		controller: 'BlackjackCtrl',
		title: 'Blackjack'
	}).state('numberPrinter', {
		url: '/numberprinter/',
		templateUrl: 'numberPrinter/numberPrinter.html',
		controller: 'NumberPrinterCtrl',
		title: 'Number Printer'
	});

	$urlRouterProvider.otherwise('/');
	$urlRouterProvider.when(/ii/, ['$state', '$match', function ($state, $match) {
		$state.go('ii');
	}]);

	$locationProvider.html5Mode(true);
}]);
'use strict';

angular.module('mcnedward').controller('AppCtrl', ['$rootScope', '$state', '$timeout', '$location', '$anchorScroll', function AppCtrl($rootScope, $state, $timeout, $location, $anchorScroll) {
  'use strict';

  $rootScope.inRoot = true;
  $rootScope.appTitle = "Edward McNealy";

  $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
    $rootScope.appTitle = toState.title && toState.title !== '' ? toState.title : 'Edward McNealy';
    if (fromState.name === 'app') {
      // Scroll up to the top when going away from the main app
      adjustScroll('scrollhere');
    } else {
      adjustScroll(fromState.name);
    }
    if (fromState.name === 'colorZones') {
      // The color zones need to stop rendering since we're no longer on that page
      $rootScope.$broadcast('stopRendering');
    }

    $rootScope.inRoot = toState.name === 'app' || toState.name === '';
    $rootScope.useContainerFluid = toState.name == 'colorZones' || toState.name == 'parser';
    $rootScope.useContainer = !$rootScope.inRoot && !$rootScope.useContainerFluid;

    // Update Google Analytics
    ga('set', 'page', toState.name === 'app' ? '/index.html' : toState.url + '.html');
    ga('send', 'pageview');
  });

  $('#loader').fadeOut(500);

  function adjustScroll(id) {
    if (!id || id === '') return;
    $timeout(function () {
      $('html, body').animate({
        scrollTop: $('#' + id).offset().top + 2
      }, 1);
    });
  }
}]);
'use strict';

/**
 * Created by Edward on 11/8/2014.
 */
angular.module('mcnedward').controller('BlackjackCtrl', ['$rootScope', '$scope', '$window', 'blackjackService', 'playerService', function BlackjackCtrl($rootScope, $scope, $window, blackjackService, playerService) {
	'use strict';

	$scope.player = playerService.getPlayer();
	$scope.dealer = playerService.getDealer();

	$rootScope.$on('busted', function (event, args) {
		var user = args;
		if (user.type == 'player') {
			$scope.message = 'You busted...';
			playerService.userWon('dealer');
		}
		if (user.type == 'dealer') {
			$scope.message = 'Dealer busted! You win!';
			playerService.userWon('player');
		}
		blackjackService.flipCards();
		updateUsers(true);
		toggleOptions(false);
	});
	$rootScope.$on('dealerWon', function () {
		$scope.message = 'Dealer wins...';
		playerService.userWon('dealer');
		updateUsers(true);
		toggleOptions(false);
	});
	$rootScope.$on('playerWon', function () {
		$scope.message = 'You win!';
		playerService.userWon('player');
		updateUsers(true);
		toggleOptions(false);
	});
	$rootScope.$on('push', function () {
		$scope.message = 'Push.';
		updateUsers(true);
		toggleOptions(false);
	});
	$rootScope.$on('21', function (event, args) {
		var user = args;
		if (user.type == 'player') {
			$scope.message = 'You got 21! You win!';
			playerService.userWon('player');
		}
		if (user.type == 'dealer') {
			$scope.message = 'Dealer got 21...';
			playerService.userWon('dealer');
		}
		blackjackService.flipCards();
		updateUsers(true);
		toggleOptions(false);
	});

	for (var x = 0; x < 3; x++) {
		var card = $('<img>');
		if (x == 2) {
			card.attr('src', 'img/blackjack/card/b2fv.png');
			card.attr('id', 'startCard');
			card.addClass('card-img');
		} else {
			card.attr('src', 'img/blackjack/card/b2pl.png');
			card.addClass('card-img');
		}
		$('#startCards').append(card);
	}

	$scope.dealCards = function () {
		$scope.message = '';
		// Remove hidden placeholder cards
		$('.empty-card').css('display', 'none');
		playerService.resetUsers();
		// Reset hit21 every time new deck is dealt
		$rootScope.hit21 = false;
		blackjackService.dealCards();
		if (!$rootScope.hit21) {
			updateUsers();
			toggleOptions(true);
		}
	};

	// Scope functions
	$scope.hitMe = function () {
		blackjackService.hitMe($scope.player);
		updateUsers();
	};
	$scope.stay = function () {
		blackjackService.stay();
		updateUsers();
	};
	$scope.addChip = function (amount) {
		$scope.message = '';
		if ($scope.stopBets) {
			$scope.message = 'You can"t place any more bets now!';
			return;
		}
		if ($scope.player.money < $scope.player.bet + amount) {
			$scope.message = 'You don"t have the money to place that bet!';
			return;
		}
		playerService.addChip(amount);
		updateUsers();
	};
	$scope.clearBet = function () {
		$scope.message = '';
		if ($scope.stopBets) {
			if ($scope.player.bet > 0) $scope.message = 'You can"t back out now!';
			return;
		}
		playerService.clearBet();
	};

	function updateUsers(save) {
		$scope.player = playerService.getPlayer();
		$scope.dealer = playerService.getDealer();
		if (save) {
			saveUsers();
		}
	}
	function saveUsers() {
		playerService.updateUsers([$scope.player, $scope.dealer]);
	}

	function toggleOptions(optionsOn) {
		if (optionsOn) {
			$('#options').show();
			$('#startCards').hide();
			// Disable bets
			$scope.stopBets = true;
		} else {
			$('#options').hide();
			$('#startCards').show();
			// Enable bets
			$scope.stopBets = false;
		}
	}
}]);
'use strict';

/**
 * Created by Edward on 11/24/2014.
 */
angular.module('mcnedward').service('blackjackService', ['$rootScope', 'playerService', function ($rootScope, playerService) {
	'use strict';

	var blackjackService = {};
	var suits = ['clubs', 'spades', 'diamonds', 'hearts'];
	var cards = [];

	function createCard(suit, value) {
		var name, srcName;
		if (value == 1 || value > 10) {
			switch (value) {
				case 1:
					name = 'Ace';
					value = 11;
					break;
				case 11:
					name = 'Jack';
					value = 10;
					break;
				case 12:
					name = 'Queen';
					value = 10;
					break;
				case 13:
					name = 'King';
					value = 10;
					break;
			}
			srcName = suit.substring(0, 1).toLowerCase() + name.substring(0, 1).toLowerCase();
		} else {
			name = value;
			srcName = suit.substring(0, 1).toLowerCase() + value;
		}
		var id = suit + name;
		return {
			suit: suit,
			name: name,
			value: value,
			id: id,
			isFaceDown: false,
			src: 'img/blackjack/card/' + srcName + '.png'
		};
	}

	function createCards() {
		cards = [];
		for (var i = 0; i < suits.length; i++) {
			for (var value = 1; value < 14; value++) {
				var card = createCard(suits[i], value);
				cards.push(card);
			}
		}
	}

	blackjackService.dealCards = function () {
		shuffle();
		//fixDeck();
		for (var x = 0; x < 4; x++) {
			if (x % 2 === 0) {
				dealCard(playerService.getPlayer());
			} else {
				if (x == 3) dealCard(playerService.getDealer(), true);else dealCard(playerService.getDealer());
			}
		}
	};

	function dealCard(user, faceDown) {
		var card = cards[0];
		if (faceDown) card.isFaceDown = faceDown;
		playerService.addCard(user, card);

		cards.splice(cards.indexOf(card), 1);
	}

	blackjackService.hitMe = function (user) {
		dealCard(user);
	};

	blackjackService.stay = function () {
		var dealer = playerService.getDealer();
		for (var x = 0; x < dealer.cards; x++) {
			if (dealer.cards[x].isFaceDown) {
				dealer.cards[x].faceDown = false;
			}
		}
		while (dealer.handValue < 17) {
			dealCard(dealer);
		}
		if (dealer.handValue > 21) {
			$rootScope.$broadcast('dealerBusted');
		} else if (dealer.handValue > playerService.getPlayer().handValue) {
			$rootScope.$broadcast('dealerWon');
		} else if (dealer.handValue == playerService.getPlayer().handValue) {
			$rootScope.$broadcast('push');
		} else {
			$rootScope.$broadcast('playerWon');
		}
		$rootScope.$broadcast('showCards');
	};

	// Fischer-Yates shuffle
	function shuffle() {
		createCards();

		var cardsCopy = [],
		    cardsCount = cards.length,
		    i;

		// While there are still cards in original deck...
		while (cardsCount) {
			// Pick a random card
			i = Math.floor(Math.random() * cards.length);
			var card = cards[i];
			// If not already shuffled, move it to the new array.
			if (i in cards) {
				cardsCopy.push(card);
				delete cards[i];
				cardsCount--;
			}
		}
		cards = cardsCopy;
		return cards;
	}

	function fixDeck() {
		cards.push(createCard('clubs', 1));
		cards.push(createCard('clubs', 1));
		cards.push(createCard('clubs', 10));
		cards.push(createCard('clubs', 9));
		cards.push(createCard('clubs', 1));
		cards.push(createCard('clubs', 7));
		cards.push(createCard('clubs', 10));
		cards.push(createCard('clubs', 9));
	}

	// Spin through dealer's cards and flip any face downs
	blackjackService.flipCards = function () {
		for (var c = 0; c < playerService.getDealer().cards.length; c++) {
			var card = playerService.getDealer().cards[c];
			if (card.isFaceDown) {
				card.isFaceDown = false;
				playerService.getDealer().table.find($('#' + card.id)).attr('src', card.src);
			}
		}
	};

	return blackjackService;
}]);
'use strict';

/**
 * Created by Edward on 11/24/2014.
 */
angular.module('mcnedward').service('playerService', ['$rootScope', function ($rootScope) {
	'use strict';

	var playerService = {},
	    users = {};

	function updateUser(user) {
		users[user.type] = user;
		localStorage.users = JSON.stringify(users);
	}
	function updateUsers(users) {
		for (var i = 0; i < users.length; i++) {
			var user = users[i];
			updateUser(user);
		}
	}

	playerService.getPlayer = function () {
		return users.player;
	};
	playerService.getDealer = function () {
		return users.dealer;
	};
	playerService.resetUsers = function () {
		initUsers();
	};
	// Find the user based on the passed in user's type, then update
	playerService.updateUser = function (user) {
		updateUser(user);
	};
	// Update all playerService
	playerService.updateUsers = function (users) {
		updateUsers(users);
	};
	playerService.addCard = function (user, card) {
		user.cards.push(card);
		user.handValue = user.handValue + card.value;
		if (user.handValue > 21) {
			adjustForAces(user);
		}
		if (user.handValue == 21) {
			$rootScope.$broadcast('21', user);
			$rootScope.hit21 = true;
		}
	};
	playerService.addChip = function (amount) {
		users.player.chips['chip' + amount + 's']++;
		users.player.bet = users.player.bet + amount;
		updateUser(users.player);
	};
	playerService.clearBet = function () {
		users.player.bet = 0;
		users.player.chips = getChips();
	};
	playerService.userWon = function (userType) {
		var player = users.player;
		var dealer = users.dealer;
		if (userType == 'player') {
			player.wins = player.wins + 1;
			dealer.loses = dealer.loses + 1;
			player.money += player.bet;
		} else {
			dealer.wins = dealer.wins + 1;
			player.loses = player.loses + 1;
			player.money -= player.bet;
		}
		player.bet = 0;
		player.chips = getChips();
		updateUsers([player, dealer]);
	};

	// Called when service is created, and when a new deck is dealt
	function initUsers() {
		function clearHand(user) {
			user.cards = [];
			user.handValue = 0;
		}
		// Get users from localStorage. This converts their tables back to a jQuery element as well
		function getSavedUsers() {
			var savedUsers = JSON.parse(localStorage.users);
			savedUsers.player.table = $(savedUsers.player.table.selector);
			savedUsers.dealer.table = $(savedUsers.dealer.table.selector);
			return savedUsers;
		}
		// If users already exist, use them
		if (localStorage.users && localStorage.users.length > 2) {
			var savedUsers = getSavedUsers();
			var player = savedUsers.player;
			var dealer = savedUsers.dealer;
			clearHand(player);
			clearHand(dealer);
			updateUsers([player, dealer]);
		} else {
			users.player = {
				table: $('#pTable'),
				cards: [],
				handValue: 0,
				type: 'player',
				money: 1000,
				bet: 0,
				chips: getChips(),
				wins: 0,
				loses: 0
			};
			users.dealer = {
				table: $('#dTable'),
				cards: [],
				handValue: 0,
				type: 'dealer',
				wins: 0,
				loses: 0
			};
			localStorage.users = JSON.stringify(users);
		}
	}
	initUsers();

	function getChips() {
		return {
			chip5s: 0,
			chip10s: 0,
			chip25s: 0,
			chip100s: 0,
			chip500s: 0
		};
	}

	// Check the user's hand for Aces. If there is an ace with the value of 11, change the value to 1
	// If the hand value is over 21 after adjusting, the player busts
	function adjustForAces(user) {
		for (var x = 0; x < user.cards.length; x++) {
			if (user.cards[x].name == 'Ace') {
				// If ace card not already adjusted, fix that
				if (user.cards[x].value == 11) {
					user.cards[x].value = 1;
					updateUserHandValue(user);
				}
				// Stop spinning if hand value less than 21
				if (user.handValue < 21) break;
			}
		}
		if (user.handValue > 21) {
			$rootScope.$broadcast('busted', user);
		}
	}

	function updateUserHandValue(user) {
		var value = 0;
		for (var x = 0; x < user.cards.length; x++) {
			value = value + user.cards[x].value;
		}
		user.handValue = value;
		updateUser(user);
	}

	return playerService;
}]);
'use strict';

/**
 * Created by Edward on 2/19/15.
 */
angular.module('mcnedward').directive('playingCard', function () {
	'use strict';

	return {
		scope: {
			card: '='
		},
		restrict: 'AE',
		replace: 'true',
		controller: function controller($scope) {
			$scope.$on('playerBusted', function () {
				if ($scope.card.isFaceDown) {
					$('#' + $scope.card.id).attr('src', $scope.card.src);
				}
			});
			$scope.$on('showCards', function () {
				$('#' + $scope.card.id).attr('src', $scope.card.src);
			});
		},
		link: function link(scope, element, attrs) {
			if (scope.card.isFaceDown) element.attr('src', 'img/blackjack/card/b2fv.png');else element.attr('src', scope.card.src);
		},
		template: '<img id="{{card.id}}" class="card-img"/>'
	};
});
'use strict';

/**
 * Created by Edward on 10/11/2016.
 */
angular.module('mcnedward').controller('ContactCtrl', ['$scope', function ContactCtrl($scope) {
		'use strict';

		$scope.contactInfo = {};
		$scope.isFormSubmitted = false;
		$scope.contactSuccessMessage = '';
		$scope.contactErrorMessage = '';

		function clear() {
				$scope.contactSuccessMessage = '';
				$scope.contactErrorMessage = '';
		}
		function showError(message) {
				clear();
				$scope.contactErrorMessage = message;
		}

		$scope.submitContact = function (form, contactInfo) {
				if ($scope.isFormSubmitted) return;
				form.$setSubmitted();
				if (form.$invalid) return;
				$scope.isFormSubmitted = true;
				form.$setPristine();
				form.$setUntouched();
				clear();

				var reCaptchaError = 'Sorry, but something went wrong with the reCaptcha. Please refresh the page and try again.';
				if (grecaptcha === null) {
						showError(reCaptchaError);
						return;
				}
				var secretResponse = contactInfo.recaptchaResponse;
				if (secretResponse === null) {
						showError(reCaptchaError);
						return;
				}

				$scope.contactSuccessMessage = 'Sending...';
				var url = '/api/contact?secretResponse=' + secretResponse;
				fetch(url, {
						method: 'POST',
						headers: {
								'Accept': 'application/json',
								'Content-Type': 'application/json'
						},
						body: JSON.stringify(contactInfo)
				}).then(function (response) {
						if (!response.ok) {
								response.text().then(function (text) {
										showError(text);
										$scope.isFormSubmitted = false;
										$scope.$apply();
								});
						} else {
								response.text().then(function (text) {
										$scope.contactSuccessMessage = text;
										$scope.$apply();
										// Trigger Google Analytic event
										ga('send', 'event', 'Contact', 'Email', 'From: ' + contactInfo.email + ' - Subject: ' + contactInfo.subject);
								});
						}
				});
		};

		$scope.checkLength = function (value) {
				var length = value ? value.length : 0;
				if (!length) length = 0;
				return length;
		};
		$scope.emailMaxLength = 100;
		$scope.subjectMaxLength = 100;
		$scope.messageMaxLength = 1000;
		$scope.subjectLength = function () {
				return $scope.checkLength($scope.contactInfo.subject);
		};
		$scope.messageLength = function () {
				return $scope.checkLength($scope.contactInfo.message);
		};
}]);
'use strict';

function ColorPicker() {
  var self = this;

  self.hours = 'hours';
  self.minutes = 'minutes';
  self.seconds = 'seconds';
  self.red = 'red';
  self.green = 'green';
  self.blue = 'blue';
  self.colors = ko.observable({
    red: {
      class: 'btn-danger',
      interval: self.hours
    },
    green: {
      class: 'btn-success',
      interval: self.minutes
    },
    blue: {
      class: 'btn-primary',
      interval: self.seconds
    }
  });
  self.hoursColor = ko.observable(self.colors().red.class);
  self.minutesColor = ko.observable(self.colors().green.class);
  self.secondsColor = ko.observable(self.colors().blue.class);

  self.update = function (intervalName, color) {
    // Update the selected interval observable property (self.hours, self.minutes, self.seconds) and color
    self[intervalName + 'Color'](self.colors()[color].class);

    // Get the original interval's color key
    var originalColorKey;
    for (var key in self.colors()) {
      if (!self.colors().hasOwnProperty(key)) continue;

      if (self.colors()[key].interval === intervalName) {
        originalColorKey = key;
        break;
      }
    }

    var overriden = self.colors()[color];
    self[overriden.interval + 'Color'](self.colors()[originalColorKey].class);

    var temp = self.colors()[color].interval;
    self.colors()[color].interval = intervalName;
    self.colors()[originalColorKey].interval = temp;
  };
}
'use strict';

angular.module('mcnedward').controller('ColorZonesCtrl', ['$rootScope', '$scope', function ColorZonesCtrl($rootScope, $scope) {
  'use strict';

  $(document).ready(function () {
    $scope.renderer = new Renderer();
    var timeZoneService = new TimeZoneService($scope.renderer.width());
    var colorPicker = new ColorPicker();
    var model = new ColorZonesViewModel($scope.renderer, timeZoneService, colorPicker);
    // Figure out why I need this override here...
    ko.options.useOnlyNativeEvents = true;
    ko.applyBindings(model, $('#main')[0]);

    var tooltipService = new TooltipService([{ id: $('#canvasContainer'), timeout: 8 }, { id: $('#hoursControl'), timeout: 3 }, { id: $('#minutesControl'), timeout: 3 }, { id: $('#secondsControl'), timeout: 3 }, { id: $('#opacityControl'), timeout: 4 }, { id: $('#showTimesControl'), timeout: 6 }, { id: $('#showColorsControl'), timeout: 6 }]);
    tooltipService.loadToolips();
  });

  $rootScope.$on('stopRendering', function () {
    $scope.renderer.stopRendering(true);
  });
}]);
'use strict';

var ColorZonesViewModel = function ColorZonesViewModel(renderer, timeZoneService, colorPicker) {
  var self = this;

  var width = renderer.width(),
      height = renderer.height();
  var hoverZoneColor = '#660d60';
  var timeFormat = 'HH:mm:ss';
  var _hoverTimeZoneKey, _hoverRegionKey;
  var _selectedZoneInfo;
  var _mouseX, _mouseY;
  // UI options
  self.colorPicker = ko.observable(colorPicker);
  self.opacity = ko.observable(80);
  self.showTimes = ko.observable(false);
  self.colorAllZones = ko.observable(true);
  // Map options
  self.width = ko.observable(width + 'px');
  self.height = ko.observable(height + 'px');
  self.zoom = ko.observable(1);
  self.centerLat = ko.observable(20);
  self.centerLng = ko.observable(0);
  // Cached zones and regions
  self.timeZones = ko.observableArray();
  self.timeZoneRegions = ko.observable({});

  var _textColor = ko.pureComputed(function () {
    return self.colorAllZones() ? 'white' : 'black';
  });

  // Draw Loop
  renderer.renderFunction(function () {
    if (self.timeZones().length === 0) return;

    var timeTexts = [];
    // Trigger the intervals to draw all the zones
    for (var i = 0; i < self.timeZones().length; i++) {
      var timeZone = self.timeZones()[i];

      var current = moment().tz(timeZone.name);
      var hours = adjustTime(current.hours());
      var minutes = adjustTime(current.minutes());
      var seconds = adjustTime(current.seconds());

      var red = getColorInterval(colorPicker.red, hours, minutes, seconds);
      var green = getColorInterval(colorPicker.green, hours, minutes, seconds);
      var blue = getColorInterval(colorPicker.blue, hours, minutes, seconds);

      var color = "#" + red + green + blue;
      if (self.colorAllZones()) {
        renderer.polygon(timeZone.coords, color, self.opacity());
      }

      if (timeZone.centroidPolygon === undefined) continue;
      var zoneInfo = {
        textX: timeZone.centroidPolygon.centroid.x,
        textY: timeZone.centroidPolygon.centroid.y,
        time: current.format(timeFormat),
        colorHex: color
      };
      timeTexts.push(zoneInfo);
      if (_hoverTimeZoneKey && _hoverTimeZoneKey !== '' && _hoverTimeZoneKey === timeZone.name) {
        _selectedZoneInfo = zoneInfo;
      }
    }

    var hoverTimeZone = self.timeZoneRegions()[_hoverTimeZoneKey];
    if (hoverTimeZone) {
      $.each(hoverTimeZone, function (index, value) {
        if (!value || !value.coords || value.coords.length === 0) return;
        // Use the color-zone hex when only coloring the hover region
        var hoverColor = self.colorAllZones() ? hoverZoneColor : _selectedZoneInfo.colorHex;
        renderer.polygon(value.coords, hoverColor, 80);
      });

      if (!self.showTimes()) {
        renderer.text(_mouseX, _mouseY - 5, _selectedZoneInfo.time, _textColor(), true);
      }
      renderer.text(_mouseX, _mouseY - 25, _hoverRegionKey, _textColor(), true);
      renderer.text(_mouseX, _mouseY - 45, _selectedZoneInfo.colorHex, _textColor(), true);
    }

    // Need to do this in a separate loop here to have the times drawn on top
    if (!self.showTimes()) return;
    for (var j = 0; j < timeTexts.length; j++) {
      renderer.text(timeTexts[j].textX, timeTexts[j].textY, timeTexts[j].time, _textColor());
    }
  });

  var _mapCallback;
  // Load the map image
  function loadMap(mapCallback) {
    _mapCallback = mapCallback;
    fetch('/api/color-zones/map?centerLat=' + self.centerLat() + '&centerLng=' + self.centerLng() + '&zoom=' + self.zoom() + '&width=' + width + '&height=' + height).then(function (response) {
      if (!response.ok) {
        console.error('Something went wrong trying to load the map image...');
        return;
      }
      response.text().then(function (mapUrl) {
        renderer.loadImage(mapUrl);
        if (_mapCallback !== undefined) _mapCallback();
      });
    });
  }
  loadMap();

  // Load the time zones
  timeZoneService.setup(self.centerLat, self.centerLng, self.zoom); // Pass in the observables
  timeZoneService.loadTimeZones(function (errorMessage) {
    console.error(errorMessage);
  }, self.timeZones, self.timeZoneRegions);

  function adjustTime(interval) {
    if (interval < 10) {
      interval = "0" + interval;
    }
    return interval.toString();
  }

  function getColorInterval(color, hours, minutes, seconds) {
    var interval = colorPicker.colors()[color].interval;
    switch (interval) {
      case colorPicker.hours:
        return hours;
      case colorPicker.minutes:
        return minutes;
      case colorPicker.seconds:
        return seconds;
      default:
        console.warn('Could not find an interval for: ' + interval + '...');
    }
  }

  function rayCastTest(points, x, y, zoneName) {
    var rayTest = 0;
    var lastPoint = points[points.length - 1];

    for (var j = 0; j < points.length; j++) {
      var point = points[j];

      if (lastPoint.y <= y && point.y >= y || lastPoint.y > y && point.y < y) {
        var slope = (point.x - lastPoint.x) / (point.y - lastPoint.y);
        var testPoint = slope * (y - lastPoint.y) + lastPoint.x;
        if (testPoint < x) {
          rayTest++;
        }
      }
      lastPoint = point;
    }
    // If the count is odd, we are in the polygon
    return rayTest % 2 === 1;
  }

  renderer.addMouseOverEvent(function (x, y) {
    if (self.timeZones().length === 0) return;

    var found = false;
    for (var i = 0; i < self.timeZones().length; i++) {
      var zone = self.timeZones()[i];
      var boundingBox = zone.boundingBox;
      if (boundingBox === undefined) return;

      // Source: https://github.com/dosx/timezone-picker
      if (y > boundingBox.xyMax.y && y < boundingBox.xyMin.y && x > boundingBox.xyMin.x && x < boundingBox.xyMax.x) {
        // Mouse is in the zone bounds, so now have to check if it is in one of this zone's regions
        var regions = self.timeZoneRegions()[zone.name];
        for (var key in regions) {
          if (!regions.hasOwnProperty(key)) continue;
          if (rayCastTest(regions[key].coords, x, y)) {
            _hoverTimeZoneKey = zone.name;
            _hoverRegionKey = key;
            _mouseX = x;
            _mouseY = y;
            return;
          }
        }
      }
    }
  }, self.centerLat(), self.centerLng());

  renderer.addMouseScrollEvent(function (zoom) {
    if (zoom > 1) {
      self.zoom(self.zoom() + 1);
    } else {
      self.zoom(self.zoom() - 1);
    }

    if (self.zoom() < 1) {
      // Can't zoom any lower
      self.zoom(1);
      return;
    }
  });
};
'use strict';

function Renderer() {
  var self = this;

  var width = 1200,
      height = 700;
  var canvas = $('#theCanvas')[0];
  var context = canvas.getContext('2d');
  var imageBackground;
  var matrix = [1, 0, 0, 1, 0, 0];
  var transformApplied = false;

  // TODO Make color a property here (observable?)
  // Then I can just set the color before calling a drawing function

  self.renderFunction = ko.observable();
  self.stopRendering = ko.observable(false);

  function render() {
    if (self.stopRendering()) return;
    try {
      requestAnimationFrame(render);

      // Clear the canvas each frame
      clear();
      drawImageBackground();

      if (self.renderFunction()) self.renderFunction()();
    } catch (e) {
      // Swallowing exeptions till I figure a better way to report them
    }
  }
  render();

  // Loads a url into an image then draws that image to the canvas
  self.loadImage = function (url) {
    if (imageBackground === undefined) imageBackground = new Image();
    imageBackground.onload = function () {
      // Normally, 0,0 would be the top left of the canvas.
      // I need to translate the canvas and the map image so that the center of the canvas is 0,0
      var centerX = canvas.width / 2;
      var centerY = canvas.height / 2;
      if (!transformApplied) {
        // Save the translate in the matrix
        matrix[4] += matrix[0] * centerX + matrix[2] * centerY;
        matrix[5] += matrix[1] * centerX + matrix[3] * centerY;
        context.translate(centerX, centerY);
        transformApplied = true;
      }
      context.drawImage(imageBackground, centerX * -1, centerY * -1, width, height);
    };
    imageBackground.src = url;
  };

  function drawImageBackground() {
    if (!imageBackground) return;
    var centerX = canvas.width / 2;
    var centerY = canvas.height / 2;
    context.beginPath();
    context.drawImage(imageBackground, centerX * -1, centerY * -1, width, height);
    context.closePath();
  }

  self.ellipse = function (x, y, width, height, color) {
    color = convertHex(color, 100);
    context.beginPath();
    // Ellipse: void context.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);
    context.ellipse(x, y, width / 2, height / 2, 0, 2 * Math.PI, false);
    context.fillStyle = color;
    context.fill();
  };

  self.polygon = function (points, color, alpha) {
    var polygonPoints = points.slice(0); // Need a copy of the points here
    context.beginPath();
    color = convertHex(color, alpha);
    context.fillStyle = color;

    var firstPoint = polygonPoints[0];
    var separatePoints = [];
    for (var i = 0; i < polygonPoints.length; i++) {
      var point = polygonPoints[i];
      if (i === 0) {
        context.moveTo(point.x, point.y);
      } else {
        if (point.x === firstPoint.x && point.y === firstPoint.y && i < polygonPoints.length - 1) {
          // Need to create a separate polygon for these points
          separatePoints = polygonPoints.splice(i + 1, polygonPoints.length - i);
        }
        context.lineTo(point.x, point.y);
      }
    }

    context.fill();
    context.closePath();

    if (separatePoints.length > 0) self.polygon(separatePoints, color);
  };

  self.text = function (x, y, text, color, centerText) {
    context.font = 'bold 16px Segoe UI';
    context.fillStyle = color;
    if (centerText) {
      var metrics = context.measureText(text);
      x -= metrics.width / 2;
    }
    context.fillText(text, x, y);
  };

  function clear() {
    context.clearRect(0 - canvas.width / 2, 0 - canvas.height / 2, canvas.width, canvas.height);
  }

  self.width = function () {
    return width;
  };

  self.height = function () {
    return height;
  };

  var _mouseOverEvent, _centerLat, _centerLng;
  self.addMouseOverEvent = function (mouseOverEvent, centerLat, centerLng) {
    _mouseOverEvent = mouseOverEvent;
    _centerLat = centerLat;
    _centerLng = centerLng;
    canvas.addEventListener('mousemove', function (event) {
      var rect = canvas.getBoundingClientRect();

      // The canvas uses the center as its (0, 0) point
      var centerX = canvas.width / 2;
      var centerY = canvas.height / 2;

      var x = event.clientX - rect.left - centerX;
      var y = event.clientY - rect.top - centerY;
      _mouseOverEvent(x, y);
    }, false);
  };

  var _scrollCallback;
  self.addMouseScrollEvent = function (callback) {
    _scrollCallback = callback;
    canvas.addEventListener('mousewheel', function () {
      var wheel = event.wheelDelta / 120;
      _scrollCallback(1 + wheel / 2);
    }, false);
  };

  function convertHex(hex, alpha) {
    var r = parseInt(hex.slice(1, 3), 16);
    var g = parseInt(hex.slice(3, 5), 16);
    var b = parseInt(hex.slice(5, 7), 16);
    var a = parseInt(alpha, 16) / 255;
    return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + a + ')';
  }
}
'use strict';

function TimeZoneService(mapWidth) {
  var self = this;

  var mercUnits = mapWidth / 4;

  // This is an observable that the caller passes in
  // It will be updated as the service finishes each of it's requests
  var _timeZonesObservable;
  var _timeZoneRegionsObservable;
  var _centerLat;
  var _centerLng;
  var _zoom;
  var _errorCallback;

  // These need to be observables from ColorZones
  self.setup = function (centerLat, centerLng, zoom) {
    _centerLat = centerLat;
    _centerLng = centerLng;
    _zoom = zoom;
  };

  self.loadTimeZones = function (errorCallback, timeZonesObservable, timeZoneRegionsObservable) {
    _errorCallback = errorCallback;
    if (_centerLat === undefined || _centerLng === undefined || _zoom === undefined) {
      _errorCallback('You need to call TimeZoneService.setCenterCoordinates(centerLat, centerLng, zoom) first!');
      return;
    }
    _timeZonesObservable = timeZonesObservable;
    _timeZoneRegionsObservable = timeZoneRegionsObservable;

    // Load the time zone regions
    fetch('/api/color-zones/hover-regions').then(function (response) {
      if (!response.ok) {
        _errorCallback('Something went wrong trying to load the time zone regions...');
        return;
      }
      response.json().then(function (json) {
        var hoverRegions = JSON.parse(json);

        function getTimeZone(hoverRegion) {
          // Each hover region contains a hover region array of points
          var coords = [];
          for (var i = 0; i < hoverRegion.hoverRegion.length; i++) {
            // Every two points in the hover region are the lat and lng
            var region = hoverRegion.hoverRegion[i];
            for (var j = 0; j < region.points.length; j += 2) {
              var pointPair = region.points.slice(j, j + 2);
              var xy = getXY(pointPair[0], pointPair[1]);
              coords.push(xy);
            }
          }
          return new TimeZone(hoverRegion.name, coords);
        }

        for (var i = 0; i < hoverRegions.length; i++) {
          var timeZone = getTimeZone(hoverRegions[i]);
          loadZonePolygons(timeZone);
          _timeZonesObservable().push(timeZone);
        }

        // All time zones are loaded, so we can now load the bounding boxes
        loadBoundingBoxes();
      });
    });

    self.reloadCoordinates = function () {
      for (var i = 0; i < _timeZonesObservable().length; i++) {
        var coords = _timeZonesObservable()[i].coords;
        for (var j = 0; j < coords.length; j++) {
          coords[j] = getXY(coords[j].x, coords[j].y);
        }
      }
    };

    // Load the bounding boxes
    function loadBoundingBoxes() {
      fetch('/api/color-zones/map-bounds').then(function (response) {
        if (!response.ok) {
          // TODO Handle error here
          return;
        }
        response.json().then(function (json) {
          var boundingBoxes = JSON.parse(json);
          for (var i = 0; i < boundingBoxes.length; i++) {
            var box = boundingBoxes[i];
            for (var j = 0; j < _timeZonesObservable().length; j++) {
              if (_timeZonesObservable()[j].matchesId(box.name)) {
                var xyMin = getXY(box.boundingBox.ymin, box.boundingBox.xmin);
                var xyMax = getXY(box.boundingBox.ymax, box.boundingBox.xmax);
                _timeZonesObservable()[j].boundingBox = {
                  xyMin: xyMin,
                  xyMax: xyMax
                };
                break;
              }
            }
          }
        });
      });
    }

    // Load the polygons for a time zone
    function loadZonePolygons(timeZone) {
      var zoneName = timeZone.name.replace(/\/|_/g, '-');
      fetch('/api/color-zones/polygons/' + zoneName).then(function (response) {
        if (!response.ok) {
          _errorCallback('Something went wrong trying to load the time zone polygons for ' + zoneName + '...');
          return;
        }
        response.json().then(function (json) {
          var data = JSON.parse(json);
          var polygons = {};

          for (var i = 0; i < data.polygons.length; i++) {
            // Loop through all the points in the polygon
            // Every 2 points are a lat & lng pair
            var polygonData = data.polygons[i];
            var coords = [];

            for (var j = 0; j < polygonData.points.length; j += 2) {
              var coord = polygonData.points.slice(j, j + 2);
              var xy = getXY(coord[0], coord[1]);
              coords.push(xy);
            }

            // Check if the polygon has already been created
            var polygon = polygons[polygonData.name];
            if (polygon) {
              polygon.coords = polygon.coords.concat(coords);
            } else {
              polygon = new Polygon(polygonData.name, coords, getXY(polygonData.centroid[1], polygonData.centroid[0]));
              polygons[polygonData.name] = polygon;
            }
          }

          // Check to each polygon to find the largest by seeing if it has the most edges
          // Use the largest polygon's centroid as the timezone centroid
          var centroidName,
              maxPoints = 0;
          $.each(polygons, function (index, value) {
            if (value.coords.length > maxPoints) {
              maxPoints = value.coords.length;
              centroidName = value.name;
            }
          });

          if (!_timeZoneRegionsObservable()[timeZone.name]) {
            _timeZoneRegionsObservable()[timeZone.name] = [];
          }
          _timeZoneRegionsObservable()[timeZone.name] = polygons;
          timeZone.centroidPolygon = polygons[centroidName];
        });
      });
    }
  };

  function getXY(lat, lng) {
    var centerX = mercX(_centerLng());
    var centerY = mercY(_centerLat());
    var x = mercX(lng) - centerX;
    var y = mercY(lat) - centerY;
    return { x: x, y: y };
  }

  function mercX(lng) {
    lng = toRadians(lng);
    var a = mercUnits / Math.PI * Math.pow(2, _zoom());
    var b = lng + Math.PI;
    return a * b;
  }

  function mercY(lat) {
    lat = toRadians(lat);
    var a = mercUnits / Math.PI * Math.pow(2, _zoom());
    var b = Math.tan(Math.PI / 4 + lat / 2);
    var c = Math.PI - Math.log(b);
    return a * c;
  }

  function toRadians(degrees) {
    return degrees * (Math.PI / 180);
  }
}
'use strict';

function TooltipService(tooltips) {
  var self = this;

  var storageKey = 'tooltipsShown';

  self.loadToolips = function () {
    var tooltipsShown = localStorage.getItem(storageKey);
    if (tooltips.length === 0 || tooltipsShown) return;
    showTooltip(0);
  };

  function showTooltip(index) {
    if (index === tooltips.length) return;
    try {
      tooltips[index].id.tooltip('show');
    } catch (e) {}

    setTimeout(function () {
      try {
        tooltips[index].id.tooltip('dispose');
      } catch (e) {}
      // Increment the index to try to get the next tooltip
      index++;
      if (!tooltips[index]) {
        // Don't show the tooltips again
        localStorage.setItem(storageKey, true);
      }
      showTooltip(index);
    }, tooltips[index].timeout * 1000);
  }
}
'use strict';

/**
 * Created by Edward on 10/7/2014.
 */
angular.module('mcnedward').controller('IICtrl', ['$scope', 'modalService', function IICtrl($scope, modalService) {
	'use strict';

	$scope.iiInfo = {};
	$scope.isFormSubmitted = false;

	function showAppError(errorMessage) {
		$scope.showAppError = true;
		$scope.appError = error;
	}
	function showLibError(errorMessage) {
		$scope.showLibError = true;
		$scope.libError = error;
	}
	function clearAppError(errorMessage) {
		$scope.showAppError = false;
		$scope.appError = '';
	}
	function clearLibError(errorMessage) {
		$scope.showLibError = false;
		$scope.libError = '';
	}

	$scope.openDownloadForApp = function () {
		clearAppError();
		modalService.showModal('downloadAppModal');
	};
	$scope.openDownloadForLib = function () {
		clearLibError();
		modalService.showModal('downloadLibModal');
	};

	$scope.downloadIIApp = function (form, iiAppInfo) {
		if ($scope.isAppFormSubmitted) return;
		form.$setSubmitted();
		if (form.$invalid) return;
		$scope.isAppFormSubmitted = true;
		form.$setPristine();
		form.$setUntouched();
		clearAppError();

		var downloadUrl = '/api/ii/app?secretResponse=' + iiAppInfo.recaptchaResponse;
		window.location.href = downloadUrl;
	};
	$scope.downloadIILib = function (form, iiLibInfo) {
		if ($scope.isLibFormSubmitted) return;
		form.$setSubmitted();
		if (form.$invalid) return;
		$scope.isLibFormSubmitted = true;
		form.$setPristine();
		form.$setUntouched();
		clearLibError();

		var downloadUrl = '/api/ii/lib?secretResponse=' + iiLibInfo.recaptchaResponse;
		window.location.href = downloadUrl;
	};
}]);
'use strict';

/**
 * Created by Edward on 11/8/2014.
 */
angular.module('mcnedward').controller('NumberPrinterCtrl', ['$scope', function NumberPrinterCtrl($scope) {
  'use strict';

  $scope.result = '';

  $scope.convertToEnglish = function () {
    convert(function (json) {
      $scope.result = json.englishWord;
      $scope.$apply();
    });
  };

  $scope.convertToRomanNumeral = function () {
    convert(function (json) {
      $scope.result = json.romanNumeral;
      $scope.$apply();
    });
  };

  function convert(callback) {
    clearText();
    var number = $scope.number;
    if (number === '') {
      $scope.errorMessage = 'You need to enter something!';
      return;
    }
    return fetch('/api/number-printer?number=' + number).then(function (response) {
      if (response.ok) {
        response.json().then(callback);
        return;
      }
      response.text().then(function (text) {
        $scope.errorMessage = text;
        $scope.$apply();
      });
    }).catch(function (error) {
      $scope.errorMessage = error;
      $scope.$apply();
    });
  }

  function clearText() {
    $scope.result = '';
    $scope.errorMessage = '';
  }
}]);
'use strict';

/**
 * Created by Edward on 2/28/2016.
 */
angular.module('mcnedward').directive('directory', ['$rootScope', function ($rootScope) {
	'use strict';

	return {
		restrict: 'AE',
		transclude: true,
		scope: {
			name: '=',
			id: '=',
			directories: '=',
			classes: '='
		},
		link: function link(scope, element, attrs) {
			scope.selectClass = function (directoryId, classId) {
				$rootScope.$broadcast('selectClass', {
					directoryId: directoryId,
					classId: classId
				});
			};

			// If there is no name, this is a temporary directory used only for the upload
			scope.isRealDirectory = scope.name !== null && scope.name !== "";
			scope.showContents = false;
		},
		templateUrl: 'parser/directory.html'
	};
}]);
'use strict';

/**
 * Created by Edward on 2/28/2016.
 */
angular.module('mcnedward').directive('dragAndDrop', ['$rootScope', '$timeout', function ($rootScope, $timeout) {
	'use strict';

	return {
		restrict: 'E',
		link: function link(scope, element, attrs) {
			var defaultDragAreaMessage = 'Drag files here!';
			scope.dragAreaMessage = defaultDragAreaMessage;
			scope.dragoverClass = '';
			scope.uploadProgress = 0;

			scope.handleError = function (message, error) {
				scope.fileSelected = false;
				scope.hasError = true;
				scope.load(false);
				scope.dragoverClass = 'dragover-error';
				scope.dragAreaMessage = '';
				scope.dragAreaError = message;
				console.log(error, message);
			};

			var firstTime = true;
			var loading = false;
			scope.load = function (isLoading) {
				scope.dragAreaError = '';
				if (isLoading) {
					loading = true;
					scope.uploadProgress = 0;
					checkProgress();
				} else {
					loading = false;
					if (scope.hasError) return;
					scope.dragAreaMessage = 'Finished!';
					scope.dragoverClass = '';
					scope.uploadProgress = 100;
					$timeout(function () {
						scope.dragAreaMessage = defaultDragAreaMessage;
						scope.uploadProgress = 0;
					}, 3000);
				}
			};
			function checkProgress() {
				// $timeout(function() {
				// 	parserService.getUploadProgress(scope.secretResponse, scope.token).then((response) => {
				//     if (!response.ok) return;

				//     response.text().then((text) => {
				//       scope.uploadProgress = text;
				//       if (loading) {
				//         checkProgress();
				//       }
				//     });
				// 	});
				// }, 300);
			}

			element.bind('dragenter', function (e) {
				e.stopPropagation();
				e.preventDefault();
				e.originalEvent.dataTransfer.dropEffect = 'copy';
				scope.dragoverClass = 'dragover';
				scope.dragAreaMessage = 'Drop files!';
				scope.dragAreaError = '';
				scope.$apply();
			});
			element.bind('dragleave', function (e) {
				e.stopPropagation();
				e.preventDefault();
				scope.dragoverClass = '';
				scope.dragAreaMessage = 'Drag files here!';
				scope.dragAreaError = '';
				scope.$apply();
			});
			element.bind('dragover', function (e) {
				e.stopPropagation();
				e.preventDefault();
				e.originalEvent.dataTransfer.dropEffect = 'copy';
				scope.dragoverClass = 'dragover';
				scope.dragAreaMessage = 'Drop files!';
				scope.dragAreaError = '';
				scope.$apply();
			});
			element.bind('dragevent', function (e) {
				e.stopPropagation();
				e.preventDefault();
			});
			element.bind('drop', function (e) {
				e.stopPropagation();
				e.preventDefault();

				var fileId = 1; // Unique id for identifying the file in the server cache
				var onError = function onError(error) {
					console.log(error);
				};

				function handleDirectory(item, directory, topDirectory) {
					var reader = item.createReader();
					return new Promise(function (resolve) {
						var iterationAttempts = [];
						(function readDirectory(directory, topDirectory) {
							reader.readEntries(function (entries) {
								if (!entries.length) {
									Promise.all(iterationAttempts).then(function (result) {
										// Everything should be done now!
										resolve(topDirectory);
									}, onError);
								} else {
									iterationAttempts.push(Promise.all(entries.map(function (entry) {
										if (entry.isFile) {
											entry.file(function (file) {
												parentDirectory.uploadFiles.push(file);
												// Add the fileId to the file name, to be stripped server-side
												var newFile = new ParserFile(fileId++, file.name);
												directory.files.push(newFile);
												return newFile;
											}, function (e) {
												console.log(e);
											});
										} else {
											var newDirectory = new ParserDirectory(entry.name, [], []);
											// If this is inside a directory, put it in there!
											if (directory) {
												directory.directories.push(newDirectory);
											} else {
												directory = newDirectory;
											}
											return handleDirectory(entry, newDirectory, topDirectory);
										}
									})));
									// Continue reading for more entries
									readDirectory(directory, topDirectory);
								}
							});
						})(directory, topDirectory);
					});
				}

				var event = e.originalEvent;
				if (event) {
					var dataTransfer = event.dataTransfer;
					var items = dataTransfer.items;
					var parentDirectory = new ParserDirectory();
					parentDirectory.uploadFiles = []; // All of the files to upload
					if (items.length == 1) {
						var item = items[0].webkitGetAsEntry();
						if (item.isFile) {
							handleFiles(items);
						} else {
							parentDirectory.name = item.name;
							handleDirectory(item, parentDirectory, parentDirectory).then(function (result) {
								notifyDirectoryDone(result);
							}, onError);
						}
					} else {
						handleFiles(items);
					}
				}

				function handleFiles(items) {
					var webkitItems = [];
					for (var i = 0; i < items.length; i++) {
						webkitItems.push(items[i].webkitGetAsEntry());
					}
					// Need to wrap this in an empty directory
					return new Promise(function (resolve) {
						var iterationAttempts = [];
						iterationAttempts.push(Promise.all(webkitItems.map(function (item) {
							if (item.isFile) {
								return new Promise(function (resolve) {
									item.file(function (file) {
										parentDirectory.uploadFiles.push(file);
										// Add the fileId to the file name, to be stripped server-side
										var newFile = new ParserFile(fileId++, file.name);
										parentDirectory.files.push(newFile);
										resolve(parentDirectory);
										return newFile;
									}, onError);
								});
							} else {
								var newDirectory = new ParserDirectory(item.name, [], []);
								// If this is inside a directory, put it in there!
								if (parentDirectory) {
									parentDirectory.directories.push(newDirectory);
								} else {
									parentDirectory = newDirectory;
								}
								return handleDirectory(item, newDirectory, parentDirectory);
							}
						})));
						Promise.all(iterationAttempts).then(function (result) {
							// Everything should be done now!
							resolve(parentDirectory);
						}, onError);
					}).then(function (result) {
						notifyDirectoryDone(result);
					}, onError);
				}

				function notifyDirectoryDone(file) {
					scope.dragoverClass = 'dropped';
					scope.dragAreaMessage = 'Ready for Upload!';
					scope.$apply();
					scope.filesDropped(file);
				}
			});
		},
		templateUrl: 'parser/fileUpload.html'
	};
}]);
'use strict';

/**
 * Created by Edward on 2/26/2016.
 */

angular.module('mcnedward').controller('ParserCtrl', ['$rootScope', '$scope', '$window', 'parserService', 'recaptchaService', 'modalService', function ParserCtrl($rootScope, $scope, $window, parserService, recaptchaService, modalService) {
  'use strict';

  if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
    modalService.showModal('deviceModal');
  }

  $scope.uploadInfo = {};
  $scope.isFormSubmitted = false;
  $scope.isParsingComplete = false;
  $scope.fileUploadMessage = "Click to choose a Java file or project to parse!";
  $scope.errorMessage = "";
  $scope.fileSelected = false;
  var errorParsingMessage = "Something went wrong parsing files...Please try again.";
  var errorUploadingMessage = "Something went wrong uploading files...Please try again.";

  $('#file-upload').change(function () {
    var files = this.files;
    if (!files || files.length === 0) {
      console.log('No files selected...');
      return;
    }
    var fileName = files[0].name;
    $scope.files = files;

    $scope.fileName = fileName;
    $scope.fileSelected = true;
    $scope.$apply();
  });

  function errorHandler(message, error) {
    var errorMessage = '';
    var data = error && error.data ? error.data : null,
        errors = data && data.errors ? data.errors : [];
    if (errors.length > 0) {
      for (var i = 0; i < errors.length; i++) {
        errorMessage += errors[i];
      }
    } else {
      errorMessage = message;
    }
    $scope.handleError(errorMessage, error);
    $scope.parsingComplete = false;
  }

  function uploadFiles(secretResponse, token) {
    $scope.secretResponse = secretResponse;
    $scope.token = token;

    parserService.uploadFiles($scope.files, secretResponse, token).then(function (response) {
      if (!response.ok) {
        response.text().then(function (text) {
          errorHandler(text);
        });
        return;
      }
      response.json().then(function (uploadResponse) {
        $scope.uploadDirectory.token = uploadResponse.token;
        $scope.uploadDirectory.fileIds = uploadResponse.fileIds;
        try {
          // Send back the uploadResponse along with the directory structure
          // This is when the actual parsing of the files will happen
          parserService.parseFiles($scope.uploadDirectory, secretResponse, token).then(function (response) {
            if (!response.ok) {
              response.text().then(function (text) {
                errorHandler(text);
                return;
              });
            } else {
              $scope.dragAreaMessage = 'Analyzing your files...';
              $scope.$apply();
              response.json().then(function (directoryResponse) {
                parserService.saveDirectory(directoryResponse);

                $scope.load(false);
                $scope.fileSelected = false;
                $scope.isParsingComplete = true;

                $scope.uploadDirectory = {};
                $scope.directory = directoryResponse;
                var classObject = findFirstFileInDirectory(directoryResponse);
                $scope.classObject = classObject;
                styleLineNumbers(classObject);
              });
            }
          }, function (error) {
            errorHandler(errorParsingMessage, error);
          });
        } catch (error) {
          errorHandler(errorParsingMessage, error);
        }
      });
    });
  }

  $scope.uploadFile = function (form, uploadInfo) {
    if ($scope.isFormSubmitted) return;
    form.$setSubmitted();
    if (form.$invalid) return;
    $scope.isFormSubmitted = true;
    form.$setPristine();
    form.$setUntouched();
    $scope.load(true);
    $scope.dragAreaMessage = 'Uploading your files...';
    recaptchaService.verify(uploadInfo.recaptchaResponse, uploadFiles, errorHandler);
  };

  $scope.selectClassObject = function (file) {
    for (var i = 0; i < $scope.classObjects.length; i++) {
      var cObject = $scope.classObjects[i];
      if (cObject.fileName === file.fileName) {
        $scope.classObject = cObject;
      }
      // This should be safe since we should always have the same number of fileNames and classObjects
      $scope.fileNames[i].isSelected = false;
    }
    file.isSelected = true;
    styleLineNumbers($scope.classObject);
  };

  $scope.filesDropped = function (directory) {
    $scope.fileName = directory.name ? directory.name : directory.uploadFiles.length + ' Files';
    $scope.files = directory.uploadFiles;
    $scope.fileSelected = true;
    $scope.uploadDirectory = directory;
    $scope.$apply(); // Need to apply because this is coming from the fileUploadDirective
  };

  $scope.moveToLine = function (content) {
    var lineNumber = content.lineNumber;
    var element = $('#' + lineNumber);
    element.addClass('line-animation-in');
    setTimeout(function () {
      element.addClass('line-animation-out');
      setTimeout(function () {
        element.removeClass('line-animation-in');
        element.removeClass('line-animation-out');
      }, 1500);
    }, 3000);
    $('#classContent').animate({
      scrollTop: element.offset().top - 200
    }, 500);
  };
  $rootScope.$on('selectClass', function (e, args) {
    var classObject = searchDirectory($scope.directory, args.directoryId, args.classId);
    if (classObject) {
      $scope.classObject = classObject;
      styleLineNumbers(classObject);
    } else {
      $scope.errorMessage = 'Could not find class.';
    }
  });
  function searchDirectory(directory, directoryId, classId) {
    var classObject;
    if (directoryId === directory.id) {
      if (directory.classes) {
        classObject = searchClassesInDirectory(directory.classes, classId);
        if (classObject) return classObject;
      }
    }
    for (var i = 0; i < directory.directories.length; i++) {
      var childDirectory = directory.directories[i];
      classObject = searchDirectory(childDirectory, directoryId, classId);
      if (classObject) return classObject;
    }
  }
  function searchClassesInDirectory(classes, classId) {
    for (var i = 0; i < classes.length; i++) {
      var c = classes[i];
      if (c.id == classId) {
        return c;
      }
    }
  }
  function findFirstFileInDirectory(directory) {
    if (directory.classes && directory.classes.length > 0) {
      return directory.classes[0];
    }
    if (directory.directories) {
      for (var i = 0; i < directory.directories.length; i++) {
        classObject = findFirstFileInDirectory(directory.directories[i]);
        if (classObject) return classObject;
      }
    }
    return null;
  }

  // FOR DEBUGGING PURPOSES!
  $scope.directory = parserService.getDirectory();
  if ($scope.directory) {
    $scope.isParsingComplete = true;
    var classObject = findFirstFileInDirectory($scope.directory);
    if (classObject) {
      $scope.classObject = classObject;
      styleLineNumbers(classObject);
    } else {
      $scope.errorMessage = 'Could not find any files in directory ' + $scope.directory.name + '.';
    }
  }

  function setFileNames(classObjects) {
    var fileNames = [];
    angular.forEach(classObjects, function (value, key) {
      fileNames.push({
        fileName: value.fileName,
        isSelected: false
      });
    });
    $scope.fileNames = fileNames;
  }

  // Thanks to: https://jsfiddle.net/tovic/AbpRD/
  function styleLineNumbers(classObject) {
    var pre;
    $('#classContent').empty();
    if (classObject.codeTag) {
      pre = classObject.codeTag;
    } else {
      pre = $('<code/>', {
        id: 'code',
        text: classObject.classContent
      });
      var preLength = pre.length;
      for (var i = 0; i < preLength; i++) {
        pre[i].innerHTML = '<span class="line-number"></span>' + pre[i].innerHTML + '<span class="cl"></span>';
        var num = pre[i].innerHTML.split(/\n/).length;
        for (var j = 0; j < num; j++) {
          var lineNumberElement = pre[i].getElementsByTagName('span')[0];
          var number = j + 1;
          lineNumberElement.innerHTML += '<span id="' + number + '">' + number + '</span>';
        }
      }
      // Cache the code tag to avoid parsing again for multiple selects
      classObject.codeTag = pre;
    }
    pre.appendTo('#classContent');
  }
}]);
"use strict";

function ParserDirectory(name, directories, files) {
	var self = this;
	self.name = name ? name : null;
	self.directories = directories ? directories : [];
	self.files = files ? files : [];
}
"use strict";

function ParserFile(id, name) {
	var self = this;
	self.id = id ? id : 0;
	self.name = name ? name : null;
}
'use strict';

/**
 * Created by Edward on 2/26/2016.
 */
angular.module('mcnedward').service('parserService', ['$http', function ($http) {
	'use strict';

	var parserService = {};

	parserService.uploadFiles = function (files, secretResponse, token) {
		var formData = new FormData();
		angular.forEach(files, function (value, key) {
			formData.append('files', value);
		});

		var url = '/api/parser/files?secretResponse=' + secretResponse + '&requestToken=' + token;
		return fetch(url, {
			method: 'POST',
			body: formData
		});
	};

	parserService.parseFiles = function (directory, secretResponse, token) {
		directory.uploadFiles = null;
		var url = '/api/parser/parse?secretResponse=' + secretResponse + '&requestToken=' + token;
		return fetch(url, {
			method: 'POST',
			headers: {
				'Accept': 'application/json',
				'Content-Type': 'application/json'
			},
			body: JSON.stringify(directory)
		});
	};

	parserService.getUploadProgress = function (secretResponse, token, responseFunction) {
		return fetch('/api/parser/progress?secretResponse=' + secretResponse + '&requestToken=' + token);
	};

	parserService.saveClasses = function (classObjects) {
		if (classObjects) {
			localStorage.classObjects = JSON.stringify(classObjects);
			parserService.classObjects = classObjects;
		} else console.log('No classObjects to save...');
	};
	parserService.getClasses = function () {
		var classObjects = localStorage.classObjects ? JSON.parse(localStorage.classObjects) : null;
		return classObjects;
	};

	parserService.saveDirectory = function (directory) {
		if (directory) {
			localStorage.directory = JSON.stringify(directory);
			parserService.directory = directory;
		} else console.log('No directory to save...');
	};
	parserService.getDirectory = function () {
		var directory = localStorage.directory ? JSON.parse(localStorage.directory) : null;
		return directory;
	};

	return parserService;
}]);
'use strict';

/**
 * Created by Edward on 2/28/2016.
 */

angular.module('mcnedward').directive('structure', ['$rootScope', function ($rootScope) {
	'use strict';

	return {
		restrict: 'E',
		transclude: true,
		scope: {
			title: '@',
			contents: '='
		},
		controller: function controller($scope, $element, $timeout) {},
		link: function link(scope, element, attrs) {},
		templateUrl: 'parser/structure.html'
	};
}]);
'use strict';

/**
 * Created by Edward on 10/18/2014.
 */
angular.module('mcnedward').factory('modalService', ['$timeout', function ($timeout) {
	'use strict';

	var modalService = {};
	var overlay, modal, close;

	function removeModal(hasPerspective) {
		classie.remove(modal, 'md-show');
	}

	function removeModalHandler() {
		removeModal();
	}

	modalService.showModal = function (modalId) {
		modal = document.querySelector('#' + modalId);
		classie.add(modal, 'md-show');

		overlay = document.querySelector('#overlay-' + modalId);
		overlay.removeEventListener('click', removeModalHandler);
		overlay.addEventListener('click', removeModalHandler);

		close = modal.querySelector('.cancel-btn');
		close.addEventListener('click', function (ev) {
			ev.stopPropagation();
			removeModalHandler();
		});
	};
	modalService.closeModal = function () {
		removeModalHandler();
	};
	modalService.isOpen = function () {
		return modal !== undefined;
	};

	function showLoading(show) {
		var loadingDiv = $('#pageLoader');
		if (show) {
			loadingDiv.show();
		} else {
			loadingDiv.hide();
		}
	}

	return modalService;
}]);
'use strict';

/**
 * Created by Edward on 10/15/2016.
 */
angular.module('mcnedward').factory('recaptchaService', function () {
  'use strict';

  var recaptchaService = {};

  recaptchaService.verify = function (secretResponse, successCallback, errorCallback) {
    if (secretResponse === null) {
      errorCallback('Sorry, but something went wrong with the reCaptcha. Please refresh the page and try again.');
      return;
    }
    fetch('/api/recaptcha/verify?secretResponse=' + secretResponse, { method: 'POST' }).then(function (response) {
      var ok = response.ok;
      response.text().then(function (text) {
        if (ok) {
          successCallback(secretResponse, text);
        } else {
          errorCallback(text);
        }
      });
    });
  };

  return recaptchaService;
});
'use strict';

/**
 * Created by Edward on 6/9/2016.
 */
angular.module('mcnedward').factory('userService', [function () {
	'use strict';

	var userService = {};
	var savedUser = null;

	userService.clearCache = function () {
		localStorage.removeItem('user');
		this.savedUser = null;
	};

	userService.isLoggedIn = function () {
		return this.getAuthToken() !== null;
	};

	userService.isAdmin = function () {
		if (!this.savedUser) this.getUser();
		if (this.savedUser.userRoles && this.savedUser.userRoles.indexOf('ADMIN') != -1) return true;else return false;
	};

	userService.save = function (user) {
		if (user && user.authToken !== '') {
			localStorage.user = JSON.stringify(user);
			this.savedUser = user;
		} else {
			console.log('No user to save.');
		}
	};

	userService.update = function () {
		this.save(this.getUser());
	};

	userService.getUser = function () {
		if (!this.savedUser) {
			this.savedUser = localStorage.user ? JSON.parse(localStorage.user) : [];
		}
		return this.savedUser;
	};

	userService.getAuthToken = function () {
		if (!this.savedUser) this.getUser();
		if (this.savedUser.authToken && this.savedUser.authToken !== '') {
			return this.savedUser.authToken;
		} else {
			return null;
		}
	};

	return userService;
}]);
'use strict';

/**
 * Created by Edward on 2/19/15.
 */
angular.module('mcnedward').directive('buttonoptions', [function () {
	'use strict';

	return {
		scope: {
			confirmAction: '&',
			cancelAction: '&'
		},
		restrict: 'AE',
		replace: 'true',
		controller: function controller($scope) {
			$scope.confirm = function () {
				$scope.confirmAction();
			};
			$scope.cancel = function () {
				$scope.cancelAction();
			};
		},
		link: function link(scope, element, attrs) {
			scope.title = attrs.confirmTitle;
			scope.cancelTitle = attrs.cancelTitle ? attrs.cancelTitle : 'X';
			if (attrs.confirmClass) scope.confirmClass = attrs.confirmClass;
		},
		// template: '<div class="button-div"><span id="confirmBtn" class="ebtn ebtn-green confirmBtn" ng-click="confirm()" ng-class="confirmClass" style="width:75%;white-space:nowrap;text-overflow:ellpsis;">{{title}}</span><span class="ebtn ebtn-red cancelBtn" ng-click="cancel()" style="width:25%">{{cancelTitle}}</span></div>'
		template: '<div class="btn-group">' + '<button data-ng-click="confirm()" class="btn ebtn-green">{{title}}</button>' + '<button data-ng-click="cancel()" class="btn ebtn-red cancelBtn">{{cancelTitle}}</button></div>'
	};
}]);
app.directive('ngEnter', function () {
	return function (scope, element, attrs) {
		element.bind('keydown keypress', function (event) {
			if (event.which === 13) {
				scope.$apply(function () {
					scope.$eval(attrs.ngEnter, { 'event': event });
				});
				event.preventDefault();
			}
		});
	};
});
"use strict";

function LatLng(lat, lng) {
  var self = this;
  self.lat = lat;
  self.lng = lng;
}
'use strict';

function Polygon(name, coords, centroid) {
  var self = this;

  self.name = name;
  self.coords = coords;
  self.centroid = centroid;

  self.id = ko.pureComputed(function () {
    return self.name.replace(/\/|_/g, '-');
  });
}
'use strict';

function TimeZone(name, coords) {
  var self = this;

  self.name = name;
  self.coords = coords;
  self.polygons = undefined;
  self.centroidPolygon = undefined;
  self.boundingBox = undefined;

  self.matchesId = function (idToMatch) {
    return self.id() === idToMatch.replace(/\/|_/g, '-');
  };

  self.id = ko.pureComputed(function () {
    return self.name.replace(/\/|_/g, '-');
  });
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
