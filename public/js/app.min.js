'use strict';

var app = angular.module('mcnedward', ['ui.router', 'ui.bootstrap', 'ngAnimate', 'vcRecaptcha']).config(['$stateProvider', '$urlRouterProvider', '$httpProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $httpProvider, $locationProvider) {
	'use strict';

	$stateProvider.state('app', {
		url: '/',
		templateUrl: 'core/home.html',
		controller: 'ContactCtrl',
		title: 'Edward McNealy'
	}).state('ii', {
		url: '/inheritance-inquiry/',
		templateUrl: 'ii/ii.html',
		controller: 'IICtrl',
		title: 'Inheritance Inquiry'
	}).state('parser', {
		url: '/parser/',
		templateUrl: 'parser/parser.html',
		controller: 'ParserCtrl',
		title: 'Parser'
	}).state('colorZones', {
		url: '/color-zones/',
		templateUrl: 'colorZones/colorZones.html',
		controller: 'ColorZonesCtrl',
		title: 'Color Zones'
	}).state('apod', {
		url: '/apod/',
		templateUrl: 'apod/apod.html',
		controller: 'ApodCtrl',
		title: 'APOD'
	}).state('solar-system', {
		url: '/solar-system/',
		templateUrl: 'solar-system/solarSystem.html',
		controller: 'SolarSystemCtrl',
		title: 'Solar System'
	}).state('bramble', {
		url: '/bramble/',
		templateUrl: 'bramble/bramble.html',
		title: 'Bramble'
	}).state('keepfit', {
		url: '/keepfit/',
		templateUrl: 'keepfit/keepfit.html',
		title: 'KeepFit'
	}).state('blackjack', {
		url: '/blackjack/',
		templateUrl: 'blackjack/blackjack.html',
		controller: 'BlackjackCtrl',
		title: 'Blackjack'
	}).state('numberPrinter', {
		url: '/numberprinter/',
		templateUrl: 'numberPrinter/numberPrinter.html',
		controller: 'NumberPrinterCtrl',
		title: 'Number Printer'
	});

	$urlRouterProvider.otherwise('/');
	$urlRouterProvider.when(/ii/, ['$state', '$match', function ($state, $match) {
		$state.go('ii');
	}]);

	$locationProvider.html5Mode(true);
}]);
'use strict';

angular.module('mcnedward').controller('AppCtrl', ['$rootScope', '$state', '$timeout', '$location', '$anchorScroll', function AppCtrl($rootScope, $state, $timeout, $location, $anchorScroll) {
  'use strict';

  $rootScope.inRoot = true;
  $rootScope.appTitle = "Edward McNealy";

  $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
    $rootScope.appTitle = toState.title && toState.title !== '' ? toState.title : 'Edward McNealy';
    if (fromState.name === 'app') {
      // Scroll up to the top when going away from the main app
      adjustScroll('scrollhere');
    } else {
      adjustScroll(fromState.name);
    }
    if (fromState.name === 'colorZones' || fromState.name === 'solar-system') {
      // The color zones need to stop rendering since we're no longer on that page
      $rootScope.$broadcast('stopRendering');
    }

    $rootScope.inRoot = toState.name === 'app' || toState.name === '';
    $rootScope.useContainerFluid = toState.name === 'colorZones' || toState.name === 'parser' || toState.name === 'apod' || toState.name === 'solar-system';
    $rootScope.useContainer = !$rootScope.inRoot && !$rootScope.useContainerFluid;

    // Update Google Analytics
    ga('set', 'page', toState.name === 'app' ? '/index.html' : toState.url + '.html');
    ga('send', 'pageview');
  });

  $('#loader').fadeOut(200);

  function adjustScroll(id) {
    if (!id || id === '') return;
    $timeout(function () {
      $('html, body').animate({
        scrollTop: $('#' + id).offset().top + 2
      }, 1);
    });
  }
}]);
'use strict';

angular.module('mcnedward').controller('ApodCtrl', [function ApodCtrl() {
  'use strict';

  $(document).ready(function () {
    var service = new AstroService();
    var astroPicOfDay = new AstroPicOfDay(service);
    ko.applyBindings(astroPicOfDay, $('#main')[0]);
  });
}]);
'use strict';

/**
 * Created by Edward on 11/8/2014.
 */
angular.module('mcnedward').controller('BlackjackCtrl', ['$rootScope', '$scope', 'blackjackService', 'playerService', function BlackjackCtrl($rootScope, $scope, blackjackService, playerService) {
	'use strict';

	$scope.player = playerService.getPlayer();
	$scope.dealer = playerService.getDealer();

	$rootScope.$on('busted', function (event, args) {
		var user = args;
		if (user.type == 'player') {
			$scope.message = 'You busted...';
			playerService.userWon('dealer');
		}
		if (user.type == 'dealer') {
			$scope.message = 'Dealer busted! You win!';
			playerService.userWon('player');
		}
		blackjackService.flipCards();
		updateUsers(true);
		toggleOptions(false);
	});
	$rootScope.$on('dealerWon', function () {
		$scope.message = 'Dealer wins...';
		playerService.userWon('dealer');
		updateUsers(true);
		toggleOptions(false);
	});
	$rootScope.$on('playerWon', function () {
		$scope.message = 'You win!';
		playerService.userWon('player');
		updateUsers(true);
		toggleOptions(false);
	});
	$rootScope.$on('push', function () {
		$scope.message = 'Push.';
		updateUsers(true);
		toggleOptions(false);
	});
	$rootScope.$on('21', function (event, args) {
		var user = args;
		if (user.type == 'player') {
			$scope.message = 'You got 21! You win!';
			playerService.userWon('player');
		}
		if (user.type == 'dealer') {
			$scope.message = 'Dealer got 21...';
			playerService.userWon('dealer');
		}
		blackjackService.flipCards();
		updateUsers(true);
		toggleOptions(false);
	});

	for (var x = 0; x < 3; x++) {
		var card = $('<img>');
		if (x == 2) {
			card.attr('src', 'img/blackjack/card/b2fv.jpg');
			card.attr('id', 'startCard');
			card.addClass('card-img');
		} else {
			card.attr('src', 'img/blackjack/card/b2pl.jpg');
			card.addClass('card-img');
		}
		$('#startCards').append(card);
	}

	$scope.dealCards = function () {
		$scope.message = '';
		// Remove hidden placeholder cards
		$('.empty-card').css('display', 'none');
		playerService.resetUsers();
		// Reset hit21 every time new deck is dealt
		$rootScope.hit21 = false;
		blackjackService.dealCards();
		if (!$rootScope.hit21) {
			updateUsers();
			toggleOptions(true);
		}
	};

	// Scope functions
	$scope.hitMe = function () {
		blackjackService.hitMe($scope.player);
		updateUsers();
	};
	$scope.stay = function () {
		blackjackService.stay();
		updateUsers();
	};
	$scope.addChip = function (amount) {
		$scope.message = '';
		if ($scope.stopBets) {
			$scope.message = 'You can"t place any more bets now!';
			return;
		}
		if ($scope.player.money < $scope.player.bet + amount) {
			$scope.message = 'You don"t have the money to place that bet!';
			return;
		}
		playerService.addChip(amount);
		updateUsers();
	};
	$scope.clearBet = function () {
		$scope.message = '';
		if ($scope.stopBets) {
			if ($scope.player.bet > 0) $scope.message = 'You can"t back out now!';
			return;
		}
		playerService.clearBet();
	};

	function updateUsers(save) {
		$scope.player = playerService.getPlayer();
		$scope.dealer = playerService.getDealer();
		if (save) {
			saveUsers();
		}
	}
	function saveUsers() {
		playerService.updateUsers([$scope.player, $scope.dealer]);
	}

	function toggleOptions(optionsOn) {
		if (optionsOn) {
			$('#options').show();
			$('#startCards').hide();
			// Disable bets
			$scope.stopBets = true;
		} else {
			$('#options').hide();
			$('#startCards').show();
			// Enable bets
			$scope.stopBets = false;
		}
	}
}]);
'use strict';

/**
 * Created by Edward on 11/24/2014.
 */
angular.module('mcnedward').service('blackjackService', ['$rootScope', 'playerService', function ($rootScope, playerService) {
	'use strict';

	var blackjackService = {};
	var suits = ['clubs', 'spades', 'diamonds', 'hearts'];
	var cards = [];

	function createCard(suit, value) {
		var name, srcName;
		if (value == 1 || value > 10) {
			switch (value) {
				case 1:
					name = 'Ace';
					value = 11;
					break;
				case 11:
					name = 'Jack';
					value = 10;
					break;
				case 12:
					name = 'Queen';
					value = 10;
					break;
				case 13:
					name = 'King';
					value = 10;
					break;
			}
			srcName = suit.substring(0, 1).toLowerCase() + name.substring(0, 1).toLowerCase();
		} else {
			name = value;
			srcName = suit.substring(0, 1).toLowerCase() + value;
		}
		var id = suit + name;
		return {
			suit: suit,
			name: name,
			value: value,
			id: id,
			isFaceDown: false,
			src: 'img/blackjack/card/' + srcName + '.jpg'
		};
	}

	function createCards() {
		cards = [];
		for (var i = 0; i < suits.length; i++) {
			for (var value = 1; value < 14; value++) {
				var card = createCard(suits[i], value);
				cards.push(card);
			}
		}
	}

	blackjackService.dealCards = function () {
		shuffle();
		//fixDeck();
		for (var x = 0; x < 4; x++) {
			if (x % 2 === 0) {
				dealCard(playerService.getPlayer());
			} else {
				if (x == 3) dealCard(playerService.getDealer(), true);else dealCard(playerService.getDealer());
			}
		}
	};

	function dealCard(user, faceDown) {
		var card = cards[0];
		if (faceDown) card.isFaceDown = faceDown;
		playerService.addCard(user, card);

		cards.splice(cards.indexOf(card), 1);
	}

	blackjackService.hitMe = function (user) {
		dealCard(user);
	};

	blackjackService.stay = function () {
		var dealer = playerService.getDealer();
		for (var x = 0; x < dealer.cards; x++) {
			if (dealer.cards[x].isFaceDown) {
				dealer.cards[x].faceDown = false;
			}
		}
		while (dealer.handValue < 17) {
			dealCard(dealer);
		}
		if (dealer.handValue > 21) {
			$rootScope.$broadcast('dealerBusted');
		} else if (dealer.handValue > playerService.getPlayer().handValue) {
			$rootScope.$broadcast('dealerWon');
		} else if (dealer.handValue == playerService.getPlayer().handValue) {
			$rootScope.$broadcast('push');
		} else {
			$rootScope.$broadcast('playerWon');
		}
		$rootScope.$broadcast('showCards');
	};

	// Fischer-Yates shuffle
	function shuffle() {
		createCards();

		var cardsCopy = [],
		    cardsCount = cards.length,
		    i;

		// While there are still cards in original deck...
		while (cardsCount) {
			// Pick a random card
			i = Math.floor(Math.random() * cards.length);
			var card = cards[i];
			// If not already shuffled, move it to the new array.
			if (i in cards) {
				cardsCopy.push(card);
				delete cards[i];
				cardsCount--;
			}
		}
		cards = cardsCopy;
		return cards;
	}

	function fixDeck() {
		cards.push(createCard('clubs', 1));
		cards.push(createCard('clubs', 1));
		cards.push(createCard('clubs', 10));
		cards.push(createCard('clubs', 9));
		cards.push(createCard('clubs', 1));
		cards.push(createCard('clubs', 7));
		cards.push(createCard('clubs', 10));
		cards.push(createCard('clubs', 9));
	}

	// Spin through dealer's cards and flip any face downs
	blackjackService.flipCards = function () {
		for (var c = 0; c < playerService.getDealer().cards.length; c++) {
			var card = playerService.getDealer().cards[c];
			if (card.isFaceDown) {
				card.isFaceDown = false;
				playerService.getDealer().table.find($('#' + card.id)).attr('src', card.src);
			}
		}
	};

	return blackjackService;
}]);
'use strict';

/**
 * Created by Edward on 11/24/2014.
 */
angular.module('mcnedward').service('playerService', ['$rootScope', function ($rootScope) {
	'use strict';

	var playerService = {},
	    users = {};

	function updateUser(user) {
		users[user.type] = user;
		localStorage.users = JSON.stringify(users);
	}
	function updateUsers(users) {
		for (var i = 0; i < users.length; i++) {
			var user = users[i];
			updateUser(user);
		}
	}

	playerService.getPlayer = function () {
		return users.player;
	};
	playerService.getDealer = function () {
		return users.dealer;
	};
	playerService.resetUsers = function () {
		initUsers();
	};
	// Find the user based on the passed in user's type, then update
	playerService.updateUser = function (user) {
		updateUser(user);
	};
	// Update all playerService
	playerService.updateUsers = function (users) {
		updateUsers(users);
	};
	playerService.addCard = function (user, card) {
		user.cards.push(card);
		user.handValue = user.handValue + card.value;
		if (user.handValue > 21) {
			adjustForAces(user);
		}
		if (user.handValue == 21) {
			$rootScope.$broadcast('21', user);
			$rootScope.hit21 = true;
		}
	};
	playerService.addChip = function (amount) {
		users.player.chips['chip' + amount + 's']++;
		users.player.bet = users.player.bet + amount;
		updateUser(users.player);
	};
	playerService.clearBet = function () {
		users.player.bet = 0;
		users.player.chips = getChips();
	};
	playerService.userWon = function (userType) {
		var player = users.player;
		var dealer = users.dealer;
		if (userType == 'player') {
			player.wins = player.wins + 1;
			dealer.loses = dealer.loses + 1;
			player.money += player.bet;
		} else {
			dealer.wins = dealer.wins + 1;
			player.loses = player.loses + 1;
			player.money -= player.bet;
		}
		player.bet = 0;
		player.chips = getChips();
		updateUsers([player, dealer]);
	};

	// Called when service is created, and when a new deck is dealt
	function initUsers() {
		function clearHand(user) {
			user.cards = [];
			user.handValue = 0;
		}
		// Get users from localStorage. This converts their tables back to a jQuery element as well
		function getSavedUsers() {
			var savedUsers = JSON.parse(localStorage.users);
			savedUsers.player.table = $(savedUsers.player.table.selector);
			savedUsers.dealer.table = $(savedUsers.dealer.table.selector);
			return savedUsers;
		}
		// If users already exist, use them
		if (localStorage.users && localStorage.users.length > 2) {
			var savedUsers = getSavedUsers();
			var player = savedUsers.player;
			var dealer = savedUsers.dealer;
			clearHand(player);
			clearHand(dealer);
			updateUsers([player, dealer]);
		} else {
			users.player = {
				table: $('#pTable'),
				cards: [],
				handValue: 0,
				type: 'player',
				money: 1000,
				bet: 0,
				chips: getChips(),
				wins: 0,
				loses: 0
			};
			users.dealer = {
				table: $('#dTable'),
				cards: [],
				handValue: 0,
				type: 'dealer',
				wins: 0,
				loses: 0
			};
			localStorage.users = JSON.stringify(users);
		}
	}
	initUsers();

	function getChips() {
		return {
			chip5s: 0,
			chip10s: 0,
			chip25s: 0,
			chip100s: 0,
			chip500s: 0
		};
	}

	// Check the user's hand for Aces. If there is an ace with the value of 11, change the value to 1
	// If the hand value is over 21 after adjusting, the player busts
	function adjustForAces(user) {
		for (var x = 0; x < user.cards.length; x++) {
			if (user.cards[x].name == 'Ace') {
				// If ace card not already adjusted, fix that
				if (user.cards[x].value == 11) {
					user.cards[x].value = 1;
					updateUserHandValue(user);
				}
				// Stop spinning if hand value less than 21
				if (user.handValue < 21) break;
			}
		}
		if (user.handValue > 21) {
			$rootScope.$broadcast('busted', user);
		}
	}

	function updateUserHandValue(user) {
		var value = 0;
		for (var x = 0; x < user.cards.length; x++) {
			value = value + user.cards[x].value;
		}
		user.handValue = value;
		updateUser(user);
	}

	return playerService;
}]);
'use strict';

/**
 * Created by Edward on 2/19/15.
 */
angular.module('mcnedward').directive('playingCard', function () {
	'use strict';

	return {
		scope: {
			card: '='
		},
		restrict: 'AE',
		replace: 'true',
		controller: ['$scope', function ($scope) {
			$scope.$on('playerBusted', function () {
				if ($scope.card.isFaceDown) {
					$('#' + $scope.card.id).attr('src', $scope.card.src);
				}
			});
			$scope.$on('showCards', function () {
				$('#' + $scope.card.id).attr('src', $scope.card.src);
			});
		}],
		link: function link(scope, element, attrs) {
			if (scope.card.isFaceDown) element.attr('src', 'img/blackjack/card/b2fv.jpg');else element.attr('src', scope.card.src);
		},
		template: '<img id="{{card.id}}" class="card-img"/>'
	};
});
'use strict';

angular.module('mcnedward').controller('ColorZonesCtrl', ['$rootScope', '$scope', function ColorZonesCtrl($rootScope, $scope) {
  'use strict';

  var renderer;

  $(document).ready(function () {
    var width = 1200,
        height = 700;
    renderer = new Renderer({
      width: width,
      height: height
    });
    var timeZoneService = new TimeZoneService(renderer.width);
    var colorPicker = new ColorPicker();
    var model = new ColorZonesViewModel({
      renderer: renderer,
      timeZoneService: timeZoneService,
      colorPicker: colorPicker,
      width: width,
      height: height
    });
    // Figure out why I need this override here...
    ko.options.useOnlyNativeEvents = true;
    ko.applyBindings(model, $('#main')[0]);

    var tooltipService = new TooltipService([{ id: $('#canvasContainer'), timeout: 8 }, { id: $('#hoursControl'), timeout: 3 }, { id: $('#minutesControl'), timeout: 3 }, { id: $('#secondsControl'), timeout: 3 }, { id: $('#opacityControl'), timeout: 4 }, { id: $('#showTimesControl'), timeout: 6 }, { id: $('#showColorsControl'), timeout: 6 }]);
    tooltipService.loadToolips();
  });

  $rootScope.$on('stopRendering', function () {
    renderer.stopRendering(true);
  });
}]);
'use strict';

/**
 * Created by Edward on 10/11/2016.
 */
angular.module('mcnedward').controller('ContactCtrl', ['$scope', function ContactCtrl($scope) {
		'use strict';

		$scope.contactInfo = {};
		$scope.isFormSubmitted = false;
		$scope.contactSuccessMessage = '';
		$scope.contactErrorMessage = '';

		function clear() {
				$scope.contactSuccessMessage = '';
				$scope.contactErrorMessage = '';
		}
		function showError(message) {
				clear();
				$scope.contactErrorMessage = message;
		}

		$scope.portfolioMouseOver = function () {
				$scope.shouldFade = true;
		};
		$scope.portfolioMouseLeave = function () {
				$scope.shouldFade = false;
		};

		$scope.submitContact = function (form, contactInfo) {
				if ($scope.isFormSubmitted) return;
				form.$setSubmitted();
				if (form.$invalid) return;
				$scope.isFormSubmitted = true;
				form.$setPristine();
				form.$setUntouched();
				clear();

				var reCaptchaError = 'Sorry, but something went wrong with the reCaptcha. Please refresh the page and try again.';
				if (grecaptcha === null) {
						showError(reCaptchaError);
						return;
				}
				var secretResponse = contactInfo.recaptchaResponse;
				if (secretResponse === null) {
						showError(reCaptchaError);
						return;
				}

				$scope.contactSuccessMessage = 'Sending...';
				var url = '/api/contact?secretResponse=' + secretResponse;
				fetch(url, {
						method: 'POST',
						headers: {
								'Accept': 'application/json',
								'Content-Type': 'application/json'
						},
						body: JSON.stringify(contactInfo)
				}).then(function (response) {
						if (!response.ok) {
								response.text().then(function (text) {
										showError(text);
										$scope.isFormSubmitted = false;
										$scope.$apply();
								});
						} else {
								response.text().then(function (text) {
										$scope.contactSuccessMessage = text;
										$scope.$apply();
										// Trigger Google Analytic event
										ga('send', 'event', 'Contact', 'Email', 'From: ' + contactInfo.email + ' - Subject: ' + contactInfo.subject);
								});
						}
				});
		};

		$scope.checkLength = function (value) {
				var length = value ? value.length : 0;
				if (!length) length = 0;
				return length;
		};
		$scope.emailMaxLength = 100;
		$scope.subjectMaxLength = 100;
		$scope.messageMaxLength = 1000;
		$scope.subjectLength = function () {
				return $scope.checkLength($scope.contactInfo.subject);
		};
		$scope.messageLength = function () {
				return $scope.checkLength($scope.contactInfo.message);
		};
}]);
'use strict';

/**
 * Created by Edward on 11/8/2014.
 */
angular.module('mcnedward').controller('NumberPrinterCtrl', ['$scope', function NumberPrinterCtrl($scope) {
  'use strict';

  $scope.result = '';

  $scope.convertToEnglish = function () {
    convert(function (json) {
      $scope.result = json.englishWord;
      $scope.$apply();
    });
  };

  $scope.convertToRomanNumeral = function () {
    convert(function (json) {
      $scope.result = json.romanNumeral;
      $scope.$apply();
    });
  };

  function convert(callback) {
    clearText();
    var number = $scope.number;
    if (number === '') {
      $scope.errorMessage = 'You need to enter something!';
      return;
    }
    return fetch('/api/number-printer?number=' + number).then(function (response) {
      if (response.ok) {
        response.json().then(callback);
        return;
      }
      response.text().then(function (text) {
        $scope.errorMessage = text;
        $scope.$apply();
      });
    }).catch(function (error) {
      $scope.errorMessage = error;
      $scope.$apply();
    });
  }

  function clearText() {
    $scope.result = '';
    $scope.errorMessage = '';
  }
}]);
'use strict';

/**
 * Created by Edward on 10/7/2014.
 */
angular.module('mcnedward').controller('IICtrl', ['$scope', 'modalService', function IICtrl($scope, modalService) {
	'use strict';

	$scope.iiInfo = {};
	$scope.isFormSubmitted = false;

	function showAppError(errorMessage) {
		$scope.showAppError = true;
		$scope.appError = error;
	}
	function showLibError(errorMessage) {
		$scope.showLibError = true;
		$scope.libError = error;
	}
	function clearAppError(errorMessage) {
		$scope.showAppError = false;
		$scope.appError = '';
	}
	function clearLibError(errorMessage) {
		$scope.showLibError = false;
		$scope.libError = '';
	}

	$scope.openDownloadForApp = function () {
		clearAppError();
		modalService.showModal('downloadAppModal');
	};
	$scope.openDownloadForLib = function () {
		clearLibError();
		modalService.showModal('downloadLibModal');
	};

	$scope.downloadIIApp = function (form, iiAppInfo) {
		if ($scope.isAppFormSubmitted) return;
		form.$setSubmitted();
		if (form.$invalid) return;
		$scope.isAppFormSubmitted = true;
		form.$setPristine();
		form.$setUntouched();
		clearAppError();

		var downloadUrl = '/api/ii/app?secretResponse=' + iiAppInfo.recaptchaResponse;
		window.location.href = downloadUrl;
	};
	$scope.downloadIILib = function (form, iiLibInfo) {
		if ($scope.isLibFormSubmitted) return;
		form.$setSubmitted();
		if (form.$invalid) return;
		$scope.isLibFormSubmitted = true;
		form.$setPristine();
		form.$setUntouched();
		clearLibError();

		var downloadUrl = '/api/ii/lib?secretResponse=' + iiLibInfo.recaptchaResponse;
		window.location.href = downloadUrl;
	};
}]);
'use strict';

/**
 * Created by Edward on 2/28/2016.
 */
angular.module('mcnedward').directive('directory', ['$rootScope', function ($rootScope) {
	'use strict';

	return {
		restrict: 'AE',
		transclude: true,
		scope: {
			name: '=',
			id: '=',
			directories: '=',
			classes: '='
		},
		link: function link(scope, element, attrs) {
			scope.selectClass = function (directoryId, classId) {
				$rootScope.$broadcast('selectClass', {
					directoryId: directoryId,
					classId: classId
				});
			};

			// If there is no name, this is a temporary directory used only for the upload
			scope.isRealDirectory = scope.name !== null && scope.name !== "";
			scope.showContents = false;
		},
		templateUrl: 'parser/directory.html'
	};
}]);
'use strict';

/**
 * Created by Edward on 2/28/2016.
 */
angular.module('mcnedward').directive('dragAndDrop', ['$rootScope', '$timeout', function ($rootScope, $timeout) {
	'use strict';

	return {
		restrict: 'E',
		link: function link(scope, element, attrs) {
			var defaultDragAreaMessage = 'Drag files here!';
			scope.dragAreaMessage = defaultDragAreaMessage;
			scope.dragoverClass = '';
			scope.uploadProgress = 0;

			scope.handleError = function (message, error) {
				scope.fileSelected = false;
				scope.hasError = true;
				scope.load(false);
				scope.dragoverClass = 'dragover-error';
				scope.dragAreaMessage = '';
				scope.dragAreaError = message;
				console.log(error, message);
			};

			var firstTime = true;
			var loading = false;
			scope.load = function (isLoading) {
				scope.dragAreaError = '';
				if (isLoading) {
					loading = true;
					scope.uploadProgress = 0;
					checkProgress();
				} else {
					loading = false;
					if (scope.hasError) return;
					scope.dragAreaMessage = 'Finished!';
					scope.dragoverClass = '';
					scope.uploadProgress = 100;
					$timeout(function () {
						scope.dragAreaMessage = defaultDragAreaMessage;
						scope.uploadProgress = 0;
					}, 3000);
				}
			};
			function checkProgress() {
				// $timeout(function() {
				// 	parserService.getUploadProgress(scope.secretResponse, scope.token).then((response) => {
				//     if (!response.ok) return;

				//     response.text().then((text) => {
				//       scope.uploadProgress = text;
				//       if (loading) {
				//         checkProgress();
				//       }
				//     });
				// 	});
				// }, 300);
			}

			element.bind('dragenter', function (e) {
				e.stopPropagation();
				e.preventDefault();
				e.originalEvent.dataTransfer.dropEffect = 'copy';
				scope.dragoverClass = 'dragover';
				scope.dragAreaMessage = 'Drop files!';
				scope.dragAreaError = '';
				scope.$apply();
			});
			element.bind('dragleave', function (e) {
				e.stopPropagation();
				e.preventDefault();
				scope.dragoverClass = '';
				scope.dragAreaMessage = 'Drag files here!';
				scope.dragAreaError = '';
				scope.$apply();
			});
			element.bind('dragover', function (e) {
				e.stopPropagation();
				e.preventDefault();
				e.originalEvent.dataTransfer.dropEffect = 'copy';
				scope.dragoverClass = 'dragover';
				scope.dragAreaMessage = 'Drop files!';
				scope.dragAreaError = '';
				scope.$apply();
			});
			element.bind('dragevent', function (e) {
				e.stopPropagation();
				e.preventDefault();
			});
			element.bind('drop', function (e) {
				e.stopPropagation();
				e.preventDefault();

				var fileId = 1; // Unique id for identifying the file in the server cache
				var onError = function onError(error) {
					console.log(error);
				};

				function handleDirectory(item, directory, topDirectory) {
					var reader = item.createReader();
					return new Promise(function (resolve) {
						var iterationAttempts = [];
						(function readDirectory(directory, topDirectory) {
							reader.readEntries(function (entries) {
								if (!entries.length) {
									Promise.all(iterationAttempts).then(function (result) {
										// Everything should be done now!
										resolve(topDirectory);
									}, onError);
								} else {
									iterationAttempts.push(Promise.all(entries.map(function (entry) {
										if (entry.isFile) {
											entry.file(function (file) {
												parentDirectory.uploadFiles.push(file);
												// Add the fileId to the file name, to be stripped server-side
												var newFile = new ParserFile(fileId++, file.name);
												directory.files.push(newFile);
												return newFile;
											}, function (e) {
												console.log(e);
											});
										} else {
											var newDirectory = new ParserDirectory(entry.name, [], []);
											// If this is inside a directory, put it in there!
											if (directory) {
												directory.directories.push(newDirectory);
											} else {
												directory = newDirectory;
											}
											return handleDirectory(entry, newDirectory, topDirectory);
										}
									})));
									// Continue reading for more entries
									readDirectory(directory, topDirectory);
								}
							});
						})(directory, topDirectory);
					});
				}

				var event = e.originalEvent;
				if (event) {
					var dataTransfer = event.dataTransfer;
					var items = dataTransfer.items;
					var parentDirectory = new ParserDirectory();
					parentDirectory.uploadFiles = []; // All of the files to upload
					if (items.length == 1) {
						var item = items[0].webkitGetAsEntry();
						if (item.isFile) {
							handleFiles(items);
						} else {
							parentDirectory.name = item.name;
							handleDirectory(item, parentDirectory, parentDirectory).then(function (result) {
								notifyDirectoryDone(result);
							}, onError);
						}
					} else {
						handleFiles(items);
					}
				}

				function handleFiles(items) {
					var webkitItems = [];
					for (var i = 0; i < items.length; i++) {
						webkitItems.push(items[i].webkitGetAsEntry());
					}
					// Need to wrap this in an empty directory
					return new Promise(function (resolve) {
						var iterationAttempts = [];
						iterationAttempts.push(Promise.all(webkitItems.map(function (item) {
							if (item.isFile) {
								return new Promise(function (resolve) {
									item.file(function (file) {
										parentDirectory.uploadFiles.push(file);
										// Add the fileId to the file name, to be stripped server-side
										var newFile = new ParserFile(fileId++, file.name);
										parentDirectory.files.push(newFile);
										resolve(parentDirectory);
										return newFile;
									}, onError);
								});
							} else {
								var newDirectory = new ParserDirectory(item.name, [], []);
								// If this is inside a directory, put it in there!
								if (parentDirectory) {
									parentDirectory.directories.push(newDirectory);
								} else {
									parentDirectory = newDirectory;
								}
								return handleDirectory(item, newDirectory, parentDirectory);
							}
						})));
						Promise.all(iterationAttempts).then(function (result) {
							// Everything should be done now!
							resolve(parentDirectory);
						}, onError);
					}).then(function (result) {
						notifyDirectoryDone(result);
					}, onError);
				}

				function notifyDirectoryDone(file) {
					scope.dragoverClass = 'dropped';
					scope.dragAreaMessage = 'Ready for Upload!';
					scope.$apply();
					scope.filesDropped(file);
				}
			});
		},
		templateUrl: 'parser/fileUpload.html'
	};
}]);
'use strict';

/**
 * Created by Edward on 2/26/2016.
 */

angular.module('mcnedward').controller('ParserCtrl', ['$rootScope', '$scope', '$window', 'parserService', 'recaptchaService', 'modalService', function ParserCtrl($rootScope, $scope, $window, parserService, recaptchaService, modalService) {
  'use strict';

  if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
    modalService.showModal('deviceModal');
  }

  $scope.uploadInfo = {};
  $scope.isFormSubmitted = false;
  $scope.isParsingComplete = false;
  $scope.fileUploadMessage = "Click to choose a Java file or project to parse!";
  $scope.errorMessage = "";
  $scope.fileSelected = false;
  var errorParsingMessage = "Something went wrong parsing files...Please try again.";
  var errorUploadingMessage = "Something went wrong uploading files...Please try again.";

  $('#file-upload').change(function () {
    var files = this.files;
    if (!files || files.length === 0) {
      console.log('No files selected...');
      return;
    }
    var fileName = files[0].name;
    $scope.files = files;

    $scope.fileName = fileName;
    $scope.fileSelected = true;
    $scope.$apply();
  });

  function errorHandler(message, error) {
    var errorMessage = '';
    var data = error && error.data ? error.data : null,
        errors = data && data.errors ? data.errors : [];
    if (errors.length > 0) {
      for (var i = 0; i < errors.length; i++) {
        errorMessage += errors[i];
      }
    } else {
      errorMessage = message;
    }
    $scope.handleError(errorMessage, error);
    $scope.parsingComplete = false;
  }

  function uploadFiles(secretResponse, token) {
    $scope.secretResponse = secretResponse;
    $scope.token = token;

    parserService.uploadFiles($scope.files, secretResponse, token).then(function (response) {
      if (!response.ok) {
        response.text().then(function (text) {
          errorHandler(text);
        });
        return;
      }
      response.json().then(function (uploadResponse) {
        $scope.uploadDirectory.token = uploadResponse.token;
        $scope.uploadDirectory.fileIds = uploadResponse.fileIds;
        try {
          // Send back the uploadResponse along with the directory structure
          // This is when the actual parsing of the files will happen
          parserService.parseFiles($scope.uploadDirectory, secretResponse, token).then(function (response) {
            if (!response.ok) {
              response.text().then(function (text) {
                errorHandler(text);
                return;
              });
            } else {
              $scope.dragAreaMessage = 'Analyzing your files...';
              $scope.$apply();
              response.json().then(function (directoryResponse) {
                parserService.saveDirectory(directoryResponse);

                $scope.load(false);
                $scope.fileSelected = false;
                $scope.isParsingComplete = true;

                $scope.uploadDirectory = {};
                $scope.directory = directoryResponse;
                var classObject = findFirstFileInDirectory(directoryResponse);
                $scope.classObject = classObject;
                styleLineNumbers(classObject);
              });
            }
          }, function (error) {
            errorHandler(errorParsingMessage, error);
          });
        } catch (error) {
          errorHandler(errorParsingMessage, error);
        }
      });
    });
  }

  $scope.uploadFile = function (form, uploadInfo) {
    if ($scope.isFormSubmitted) return;
    form.$setSubmitted();
    if (form.$invalid) return;
    $scope.isFormSubmitted = true;
    form.$setPristine();
    form.$setUntouched();
    $scope.load(true);
    $scope.dragAreaMessage = 'Uploading your files...';
    recaptchaService.verify(uploadInfo.recaptchaResponse, uploadFiles, errorHandler);
  };

  $scope.selectClassObject = function (file) {
    for (var i = 0; i < $scope.classObjects.length; i++) {
      var cObject = $scope.classObjects[i];
      if (cObject.fileName === file.fileName) {
        $scope.classObject = cObject;
      }
      // This should be safe since we should always have the same number of fileNames and classObjects
      $scope.fileNames[i].isSelected = false;
    }
    file.isSelected = true;
    styleLineNumbers($scope.classObject);
  };

  $scope.filesDropped = function (directory) {
    $scope.fileName = directory.name ? directory.name : directory.uploadFiles.length + ' Files';
    $scope.files = directory.uploadFiles;
    $scope.fileSelected = true;
    $scope.uploadDirectory = directory;
    $scope.$apply(); // Need to apply because this is coming from the fileUploadDirective
  };

  $scope.moveToLine = function (content) {
    var lineNumber = content.lineNumber;
    var element = $('#' + lineNumber);
    element.addClass('line-animation-in');
    setTimeout(function () {
      element.addClass('line-animation-out');
      setTimeout(function () {
        element.removeClass('line-animation-in');
        element.removeClass('line-animation-out');
      }, 1500);
    }, 3000);
    $('#classContent').animate({
      scrollTop: element.offset().top - 200
    }, 500);
  };
  $rootScope.$on('selectClass', function (e, args) {
    var classObject = searchDirectory($scope.directory, args.directoryId, args.classId);
    if (classObject) {
      $scope.classObject = classObject;
      styleLineNumbers(classObject);
    } else {
      $scope.errorMessage = 'Could not find class.';
    }
  });
  function searchDirectory(directory, directoryId, classId) {
    var classObject;
    if (directoryId === directory.id) {
      if (directory.classes) {
        classObject = searchClassesInDirectory(directory.classes, classId);
        if (classObject) return classObject;
      }
    }
    for (var i = 0; i < directory.directories.length; i++) {
      var childDirectory = directory.directories[i];
      classObject = searchDirectory(childDirectory, directoryId, classId);
      if (classObject) return classObject;
    }
  }
  function searchClassesInDirectory(classes, classId) {
    for (var i = 0; i < classes.length; i++) {
      var c = classes[i];
      if (c.id == classId) {
        return c;
      }
    }
  }
  function findFirstFileInDirectory(directory) {
    if (directory.classes && directory.classes.length > 0) {
      return directory.classes[0];
    }
    if (directory.directories) {
      for (var i = 0; i < directory.directories.length; i++) {
        classObject = findFirstFileInDirectory(directory.directories[i]);
        if (classObject) return classObject;
      }
    }
    return null;
  }

  // FOR DEBUGGING PURPOSES!
  $scope.directory = parserService.getDirectory();
  if ($scope.directory) {
    $scope.isParsingComplete = true;
    var classObject = findFirstFileInDirectory($scope.directory);
    if (classObject) {
      $scope.classObject = classObject;
      styleLineNumbers(classObject);
    } else {
      $scope.errorMessage = 'Could not find any files in directory ' + $scope.directory.name + '.';
    }
  }

  function setFileNames(classObjects) {
    var fileNames = [];
    angular.forEach(classObjects, function (value, key) {
      fileNames.push({
        fileName: value.fileName,
        isSelected: false
      });
    });
    $scope.fileNames = fileNames;
  }

  // Thanks to: https://jsfiddle.net/tovic/AbpRD/
  function styleLineNumbers(classObject) {
    var pre;
    $('#classContent').empty();
    if (classObject.codeTag) {
      pre = classObject.codeTag;
    } else {
      pre = $('<code/>', {
        id: 'code',
        text: classObject.classContent
      });
      var preLength = pre.length;
      for (var i = 0; i < preLength; i++) {
        pre[i].innerHTML = '<span class="line-number"></span>' + pre[i].innerHTML + '<span class="cl"></span>';
        var num = pre[i].innerHTML.split(/\n/).length;
        for (var j = 0; j < num; j++) {
          var lineNumberElement = pre[i].getElementsByTagName('span')[0];
          var number = j + 1;
          lineNumberElement.innerHTML += '<span id="' + number + '">' + number + '</span>';
        }
      }
      // Cache the code tag to avoid parsing again for multiple selects
      classObject.codeTag = pre;
    }
    pre.appendTo('#classContent');
  }
}]);
"use strict";

function ParserDirectory(name, directories, files) {
	var self = this;
	self.name = name ? name : null;
	self.directories = directories ? directories : [];
	self.files = files ? files : [];
}
"use strict";

function ParserFile(id, name) {
	var self = this;
	self.id = id ? id : 0;
	self.name = name ? name : null;
}
'use strict';

/**
 * Created by Edward on 2/26/2016.
 */
angular.module('mcnedward').service('parserService', ['$http', function ($http) {
	'use strict';

	var parserService = {};

	parserService.uploadFiles = function (files, secretResponse, token) {
		var formData = new FormData();
		angular.forEach(files, function (value, key) {
			formData.append('files', value);
		});

		var url = '/api/parser/files?secretResponse=' + secretResponse + '&requestToken=' + token;
		return fetch(url, {
			method: 'POST',
			body: formData
		});
	};

	parserService.parseFiles = function (directory, secretResponse, token) {
		directory.uploadFiles = null;
		var url = '/api/parser/parse?secretResponse=' + secretResponse + '&requestToken=' + token;
		return fetch(url, {
			method: 'POST',
			headers: {
				'Accept': 'application/json',
				'Content-Type': 'application/json'
			},
			body: JSON.stringify(directory)
		});
	};

	parserService.getUploadProgress = function (secretResponse, token, responseFunction) {
		return fetch('/api/parser/progress?secretResponse=' + secretResponse + '&requestToken=' + token);
	};

	parserService.saveClasses = function (classObjects) {
		if (classObjects) {
			localStorage.classObjects = JSON.stringify(classObjects);
			parserService.classObjects = classObjects;
		} else console.log('No classObjects to save...');
	};
	parserService.getClasses = function () {
		var classObjects = localStorage.classObjects ? JSON.parse(localStorage.classObjects) : null;
		return classObjects;
	};

	parserService.saveDirectory = function (directory) {
		if (directory) {
			localStorage.directory = JSON.stringify(directory);
			parserService.directory = directory;
		} else console.log('No directory to save...');
	};
	parserService.getDirectory = function () {
		var directory = localStorage.directory ? JSON.parse(localStorage.directory) : null;
		return directory;
	};

	return parserService;
}]);
'use strict';

/**
 * Created by Edward on 2/28/2016.
 */

angular.module('mcnedward').directive('structure', ['$rootScope', function ($rootScope) {
	'use strict';

	return {
		restrict: 'E',
		transclude: true,
		scope: {
			title: '@',
			contents: '='
		},
		controller: function controller($scope, $element, $timeout) {},
		link: function link(scope, element, attrs) {},
		templateUrl: 'parser/structure.html'
	};
}]);
'use strict';

/**
 * Created by Edward on 10/18/2014.
 */
angular.module('mcnedward').factory('modalService', ['$timeout', function ($timeout) {
	'use strict';

	var modalService = {};
	var overlay, modal, close;

	function removeModal(hasPerspective) {
		classie.remove(modal, 'md-show');
	}

	function removeModalHandler() {
		removeModal();
	}

	modalService.showModal = function (modalId) {
		modal = document.querySelector('#' + modalId);
		classie.add(modal, 'md-show');

		overlay = document.querySelector('#overlay-' + modalId);
		overlay.removeEventListener('click', removeModalHandler);
		overlay.addEventListener('click', removeModalHandler);

		close = modal.querySelector('.cancel-btn');
		close.addEventListener('click', function (ev) {
			ev.stopPropagation();
			removeModalHandler();
		});
	};
	modalService.closeModal = function () {
		removeModalHandler();
	};
	modalService.isOpen = function () {
		return modal !== undefined;
	};

	function showLoading(show) {
		var loadingDiv = $('#pageLoader');
		if (show) {
			loadingDiv.show();
		} else {
			loadingDiv.hide();
		}
	}

	return modalService;
}]);
'use strict';

/**
 * Created by Edward on 10/15/2016.
 */
angular.module('mcnedward').factory('recaptchaService', function () {
  'use strict';

  var recaptchaService = {};

  recaptchaService.verify = function (secretResponse, successCallback, errorCallback) {
    if (secretResponse === null) {
      errorCallback('Sorry, but something went wrong with the reCaptcha. Please refresh the page and try again.');
      return;
    }
    fetch('/api/recaptcha/verify?secretResponse=' + secretResponse, { method: 'POST' }).then(function (response) {
      var ok = response.ok;
      response.text().then(function (text) {
        if (ok) {
          successCallback(secretResponse, text);
        } else {
          errorCallback(text);
        }
      });
    });
  };

  return recaptchaService;
});
'use strict';

/**
 * Created by Edward on 6/9/2016.
 */
angular.module('mcnedward').factory('userService', [function () {
	'use strict';

	var userService = {};
	var savedUser = null;

	userService.clearCache = function () {
		localStorage.removeItem('user');
		this.savedUser = null;
	};

	userService.isLoggedIn = function () {
		return this.getAuthToken() !== null;
	};

	userService.isAdmin = function () {
		if (!this.savedUser) this.getUser();
		if (this.savedUser.userRoles && this.savedUser.userRoles.indexOf('ADMIN') != -1) return true;else return false;
	};

	userService.save = function (user) {
		if (user && user.authToken !== '') {
			localStorage.user = JSON.stringify(user);
			this.savedUser = user;
		} else {
			console.log('No user to save.');
		}
	};

	userService.update = function () {
		this.save(this.getUser());
	};

	userService.getUser = function () {
		if (!this.savedUser) {
			this.savedUser = localStorage.user ? JSON.parse(localStorage.user) : [];
		}
		return this.savedUser;
	};

	userService.getAuthToken = function () {
		if (!this.savedUser) this.getUser();
		if (this.savedUser.authToken && this.savedUser.authToken !== '') {
			return this.savedUser.authToken;
		} else {
			return null;
		}
	};

	return userService;
}]);
'use strict';

/**
 * Created by Edward on 2/19/15.
 */
angular.module('mcnedward').directive('optionsCard', [function () {
	'use strict';

	return {
		scope: {
			type: '@',
			title: '@'
		},
		restrict: 'AE',
		transclude: true,
		link: function link(scope, element, attrs) {},
		templateUrl: 'solar-system/optionsCard.html'
	};
}]);
'use strict';

angular.module('mcnedward').controller('SolarSystemCtrl', ['$rootScope', '$scope', function SolarSystemCtrl($rootScope, $scope) {
  'use strict';

  var renderer;
  $(document).ready(function () {
    renderer = new Renderer();
    var solarSystem = new SolarSystem(renderer);
    ko.applyBindings(solarSystem);
  });

  $rootScope.$on('stopRendering', function () {
    renderer.stopRendering(true);
  });
}]);
'use strict';

/**
 * Created by Edward on 2/19/15.
 */
angular.module('mcnedward').directive('buttonoptions', [function () {
	'use strict';

	return {
		scope: {
			confirmAction: '&',
			cancelAction: '&'
		},
		restrict: 'AE',
		replace: 'true',
		controller: function controller($scope) {
			$scope.confirm = function () {
				$scope.confirmAction();
			};
			$scope.cancel = function () {
				$scope.cancelAction();
			};
		},
		link: function link(scope, element, attrs) {
			scope.title = attrs.confirmTitle;
			scope.cancelTitle = attrs.cancelTitle ? attrs.cancelTitle : 'X';
			if (attrs.confirmClass) scope.confirmClass = attrs.confirmClass;
		},
		// template: '<div class="button-div"><span id="confirmBtn" class="ebtn ebtn-green confirmBtn" ng-click="confirm()" ng-class="confirmClass" style="width:75%;white-space:nowrap;text-overflow:ellpsis;">{{title}}</span><span class="ebtn ebtn-red cancelBtn" ng-click="cancel()" style="width:25%">{{cancelTitle}}</span></div>'
		template: '<div class="btn-group">' + '<button data-ng-click="confirm()" class="btn ebtn-green">{{title}}</button>' + '<button data-ng-click="cancel()" class="btn ebtn-red cancelBtn">{{cancelTitle}}</button></div>'
	};
}]);
app.directive('ngEnter', function () {
	return function (scope, element, attrs) {
		element.bind('keydown keypress', function (event) {
			if (event.which === 13) {
				scope.$apply(function () {
					scope.$eval(attrs.ngEnter, { 'event': event });
				});
				event.preventDefault();
			}
		});
	};
});